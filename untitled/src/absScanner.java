// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer.flex

// Main code

// This object will contain the token name and line where is located


@SuppressWarnings("fallthrough")
class absScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\0"+
    "\1\5\4\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\12\17\1\20\1\21\1\22\1\23"+
    "\1\24\2\0\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\45\1\56\1\0\1\57\1\60"+
    "\1\45\1\0\27\45\1\61\2\45\1\62\1\0\1\63"+
    "\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\25\22\1\23\1\24\1\25\1\1"+
    "\1\0\1\14\1\0\1\26\1\27\1\30\1\0\1\14"+
    "\1\31\1\32\1\33\13\22\1\34\10\22\1\35\1\22"+
    "\1\36\5\22\1\37\1\40\7\22\1\41\10\22\1\0"+
    "\1\42\4\0\1\22\1\43\1\22\1\44\6\22\1\45"+
    "\2\22\1\46\3\22\1\47\4\22\1\50\1\22\1\51"+
    "\1\52\1\53\6\22\1\54\1\55\1\56\6\22\1\57"+
    "\3\22\1\60\1\61\1\14\1\0\4\22\1\62\1\63"+
    "\3\22\1\64\1\22\1\65\3\22\1\66\13\22\1\67"+
    "\1\70\1\71\1\22\1\72\2\22\1\73\2\14\1\22"+
    "\1\74\1\75\1\22\1\76\3\22\1\77\5\22\1\100"+
    "\7\22\1\101\1\22\1\102\4\22\1\103\4\22\1\104"+
    "\2\22\1\105\1\106\2\22\1\107\1\110\1\111\5\22"+
    "\1\112\4\22\1\113\1\22\1\114\1\115\2\22\1\116"+
    "\1\117\7\22\1\120\1\121\1\122\1\22\1\123\1\22"+
    "\1\124\3\22\1\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\64\0\234\0\320\0\64\0\u0104"+
    "\0\u0138\0\64\0\u016c\0\64\0\64\0\u01a0\0\64\0\64"+
    "\0\u01d4\0\64\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac"+
    "\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c"+
    "\0\64\0\64\0\64\0\u0680\0\234\0\64\0\u06b4\0\64"+
    "\0\64\0\64\0\u06e8\0\u071c\0\64\0\64\0\64\0\u0750"+
    "\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0"+
    "\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90"+
    "\0\u0ac4\0\u0af8\0\u0b2c\0\u03a8\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc"+
    "\0\u0c30\0\u0c64\0\u0c98\0\u03a8\0\u03a8\0\u0ccc\0\u0d00\0\u0d34"+
    "\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u03a8\0\u0e38\0\u0e6c\0\u0ea0"+
    "\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0680\0\64\0\u0fd8"+
    "\0\u100c\0\u1040\0\u1074\0\u10a8\0\u03a8\0\u10dc\0\u03a8\0\u1110"+
    "\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u03a8\0\u1248\0\u127c"+
    "\0\u03a8\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8"+
    "\0\u141c\0\u1450\0\u1484\0\u03a8\0\u03a8\0\u03a8\0\u14b8\0\u14ec"+
    "\0\u1520\0\u1554\0\u1588\0\u15bc\0\u03a8\0\u03a8\0\u03a8\0\u15f0"+
    "\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u03a8\0\u1728\0\u175c"+
    "\0\u1790\0\u03a8\0\u06b4\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894"+
    "\0\u18c8\0\u03a8\0\u03a8\0\u18fc\0\u1930\0\u1964\0\u03a8\0\u1998"+
    "\0\u03a8\0\u19cc\0\u1a00\0\u1a34\0\u03a8\0\u1a68\0\u1a9c\0\u1ad0"+
    "\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70"+
    "\0\u03a8\0\u03a8\0\u03a8\0\u1ca4\0\u03a8\0\u1cd8\0\u1d0c\0\u03a8"+
    "\0\u1d40\0\u1d74\0\u1da8\0\u03a8\0\u03a8\0\u1ddc\0\u1e10\0\u1e44"+
    "\0\u1e78\0\u1eac\0\u03a8\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0"+
    "\0\u03a8\0\u1fe4\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c"+
    "\0\u03a8\0\u2150\0\u03a8\0\u2184\0\u21b8\0\u21ec\0\u2220\0\u03a8"+
    "\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u03a8\0\u2324\0\u2358\0\u03a8"+
    "\0\u03a8\0\u238c\0\u23c0\0\u03a8\0\u03a8\0\u03a8\0\u23f4\0\u2428"+
    "\0\u245c\0\u2490\0\u24c4\0\u03a8\0\u24f8\0\u252c\0\u2560\0\u2594"+
    "\0\u03a8\0\u25c8\0\u03a8\0\u03a8\0\u25fc\0\u2630\0\u03a8\0\u03a8"+
    "\0\u2664\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c\0\u03a8"+
    "\0\u03a8\0\u03a8\0\u27d0\0\u03a8\0\u2804\0\u03a8\0\u2838\0\u286c"+
    "\0\u28a0\0\u03a8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\3\1\5\1\2\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\2\33\1\35\1\36"+
    "\1\37\1\40\1\41\1\33\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\33\1\51\1\52\1\53\1\33"+
    "\1\54\1\2\65\0\2\3\1\0\1\3\61\0\1\55"+
    "\2\0\1\56\11\0\1\55\5\0\31\55\3\0\1\55"+
    "\13\0\1\57\63\0\1\60\64\0\1\61\65\0\1\62"+
    "\55\0\1\63\6\0\1\64\1\0\1\16\67\0\1\65"+
    "\1\66\62\0\1\67\57\0\1\33\5\0\1\33\1\70"+
    "\13\33\1\71\3\33\1\72\1\73\6\33\3\0\1\33"+
    "\21\0\1\33\5\0\4\33\1\74\11\33\1\75\12\33"+
    "\3\0\1\33\21\0\1\33\5\0\1\76\6\33\1\77"+
    "\6\33\1\100\12\33\3\0\1\33\21\0\1\33\5\0"+
    "\4\33\1\101\3\33\1\102\5\33\1\103\12\33\3\0"+
    "\1\33\21\0\1\33\5\0\13\33\1\104\1\33\1\105"+
    "\11\33\1\106\1\33\3\0\1\33\21\0\1\33\5\0"+
    "\10\33\1\107\2\33\1\110\2\33\1\111\5\33\1\112"+
    "\4\33\3\0\1\33\21\0\1\33\5\0\16\33\1\113"+
    "\12\33\3\0\1\33\21\0\1\33\5\0\31\33\3\0"+
    "\1\33\21\0\1\33\5\0\5\33\1\114\6\33\1\115"+
    "\1\116\13\33\3\0\1\33\21\0\1\33\5\0\1\117"+
    "\30\33\3\0\1\33\21\0\1\33\5\0\16\33\1\120"+
    "\12\33\3\0\1\33\21\0\1\33\5\0\10\33\1\121"+
    "\5\33\1\122\12\33\3\0\1\33\21\0\1\33\5\0"+
    "\1\33\1\123\3\33\1\124\13\33\1\125\7\33\3\0"+
    "\1\33\21\0\1\33\5\0\1\126\20\33\1\127\7\33"+
    "\3\0\1\33\21\0\1\33\5\0\4\33\1\130\24\33"+
    "\3\0\1\33\21\0\1\33\5\0\4\33\1\131\2\33"+
    "\1\132\13\33\1\133\5\33\3\0\1\33\21\0\1\33"+
    "\5\0\7\33\1\134\6\33\1\135\11\33\1\136\3\0"+
    "\1\33\21\0\1\33\5\0\15\33\1\137\4\33\1\140"+
    "\6\33\3\0\1\33\21\0\1\33\5\0\1\141\7\33"+
    "\1\142\20\33\3\0\1\33\21\0\1\33\5\0\7\33"+
    "\1\143\1\144\20\33\3\0\1\33\21\0\1\33\5\0"+
    "\16\33\1\145\12\33\3\0\1\33\2\0\63\146\1\147"+
    "\2\57\3\0\4\57\1\150\52\57\31\0\1\151\27\0"+
    "\1\152\10\0\1\153\10\0\1\64\63\0\1\33\5\0"+
    "\22\33\1\154\6\33\3\0\1\33\21\0\1\33\5\0"+
    "\3\33\1\155\25\33\3\0\1\33\21\0\1\33\5\0"+
    "\21\33\1\156\7\33\3\0\1\33\21\0\1\33\5\0"+
    "\14\33\1\157\14\33\3\0\1\33\21\0\1\33\5\0"+
    "\6\33\1\160\22\33\3\0\1\33\21\0\1\33\5\0"+
    "\16\33\1\161\12\33\3\0\1\33\21\0\1\33\5\0"+
    "\22\33\1\162\6\33\3\0\1\33\21\0\1\33\5\0"+
    "\1\163\30\33\3\0\1\33\21\0\1\33\5\0\15\33"+
    "\1\164\13\33\3\0\1\33\21\0\1\33\5\0\22\33"+
    "\1\165\6\33\3\0\1\33\21\0\1\33\5\0\25\33"+
    "\1\166\3\33\3\0\1\33\21\0\1\33\5\0\26\33"+
    "\1\167\2\33\3\0\1\33\21\0\1\33\5\0\22\33"+
    "\1\170\6\33\3\0\1\33\21\0\1\33\5\0\3\33"+
    "\1\171\25\33\3\0\1\33\21\0\1\33\5\0\23\33"+
    "\1\172\5\33\3\0\1\33\21\0\1\33\5\0\13\33"+
    "\1\173\15\33\3\0\1\33\21\0\1\33\5\0\16\33"+
    "\1\174\12\33\3\0\1\33\21\0\1\33\5\0\21\33"+
    "\1\175\7\33\3\0\1\33\21\0\1\33\5\0\15\33"+
    "\1\176\13\33\3\0\1\33\21\0\1\33\5\0\23\33"+
    "\1\177\5\33\3\0\1\33\21\0\1\33\5\0\17\33"+
    "\1\200\11\33\3\0\1\33\21\0\1\33\5\0\13\33"+
    "\1\201\7\33\1\202\5\33\3\0\1\33\21\0\1\33"+
    "\5\0\1\33\1\203\27\33\3\0\1\33\21\0\1\33"+
    "\5\0\3\33\1\204\25\33\3\0\1\33\21\0\1\33"+
    "\5\0\13\33\1\205\15\33\3\0\1\33\21\0\1\33"+
    "\5\0\23\33\1\206\5\33\3\0\1\33\21\0\1\33"+
    "\5\0\11\33\1\207\17\33\3\0\1\33\21\0\1\33"+
    "\5\0\2\33\1\210\26\33\3\0\1\33\21\0\1\33"+
    "\5\0\10\33\1\211\5\33\1\212\12\33\3\0\1\33"+
    "\21\0\1\33\5\0\2\33\1\213\14\33\1\214\11\33"+
    "\3\0\1\33\21\0\1\33\5\0\23\33\1\215\5\33"+
    "\3\0\1\33\21\0\1\33\5\0\13\33\1\216\5\33"+
    "\1\217\7\33\3\0\1\33\21\0\1\33\5\0\21\33"+
    "\1\220\7\33\3\0\1\33\21\0\1\33\5\0\4\33"+
    "\1\221\24\33\3\0\1\33\21\0\1\33\5\0\17\33"+
    "\1\222\11\33\3\0\1\33\21\0\1\33\5\0\10\33"+
    "\1\223\12\33\1\224\5\33\3\0\1\33\21\0\1\33"+
    "\5\0\4\33\1\225\24\33\3\0\1\33\21\0\1\33"+
    "\5\0\21\33\1\226\7\33\3\0\1\33\21\0\1\33"+
    "\5\0\21\33\1\227\7\33\3\0\1\33\21\0\1\33"+
    "\5\0\10\33\1\230\20\33\3\0\1\33\21\0\1\33"+
    "\5\0\23\33\1\231\5\33\3\0\1\33\21\0\1\33"+
    "\5\0\21\33\1\232\7\33\3\0\1\33\2\0\2\57"+
    "\3\0\3\57\1\233\1\150\52\57\6\0\1\234\63\0"+
    "\1\235\106\0\1\151\51\0\1\33\5\0\16\33\1\236"+
    "\12\33\3\0\1\33\21\0\1\33\5\0\1\237\30\33"+
    "\3\0\1\33\21\0\1\33\5\0\10\33\1\240\20\33"+
    "\3\0\1\33\21\0\1\33\5\0\13\33\1\241\15\33"+
    "\3\0\1\33\21\0\1\33\5\0\4\33\1\242\24\33"+
    "\3\0\1\33\21\0\1\33\5\0\21\33\1\243\7\33"+
    "\3\0\1\33\21\0\1\33\5\0\22\33\1\244\6\33"+
    "\3\0\1\33\21\0\1\33\5\0\23\33\1\245\5\33"+
    "\3\0\1\33\21\0\1\33\5\0\15\33\1\246\13\33"+
    "\3\0\1\33\21\0\1\33\5\0\4\33\1\247\24\33"+
    "\3\0\1\33\21\0\1\33\5\0\4\33\1\250\24\33"+
    "\3\0\1\33\21\0\1\33\5\0\4\33\1\251\24\33"+
    "\3\0\1\33\21\0\1\33\5\0\1\252\30\33\3\0"+
    "\1\33\21\0\1\33\5\0\26\33\1\253\2\33\3\0"+
    "\1\33\21\0\1\33\5\0\2\33\1\254\26\33\3\0"+
    "\1\33\21\0\1\33\5\0\16\33\1\255\12\33\3\0"+
    "\1\33\21\0\1\33\5\0\13\33\1\256\15\33\3\0"+
    "\1\33\21\0\1\33\5\0\10\33\1\257\20\33\3\0"+
    "\1\33\21\0\1\33\5\0\4\33\1\260\24\33\3\0"+
    "\1\33\21\0\1\33\5\0\4\33\1\261\24\33\3\0"+
    "\1\33\21\0\1\33\5\0\4\33\1\262\24\33\3\0"+
    "\1\33\21\0\1\33\5\0\12\33\1\263\16\33\3\0"+
    "\1\33\21\0\1\33\5\0\25\33\1\264\3\33\3\0"+
    "\1\33\21\0\1\33\5\0\2\33\1\265\26\33\3\0"+
    "\1\33\21\0\1\33\5\0\16\33\1\266\12\33\3\0"+
    "\1\33\21\0\1\33\5\0\4\33\1\267\24\33\3\0"+
    "\1\33\21\0\1\33\5\0\10\33\1\270\20\33\3\0"+
    "\1\33\21\0\1\33\5\0\15\33\1\271\13\33\3\0"+
    "\1\33\21\0\1\33\5\0\4\33\1\272\24\33\3\0"+
    "\1\33\21\0\1\33\5\0\23\33\1\273\5\33\3\0"+
    "\1\33\21\0\1\33\5\0\10\33\1\274\20\33\3\0"+
    "\1\33\21\0\1\33\5\0\22\33\1\275\6\33\3\0"+
    "\1\33\21\0\1\33\5\0\23\33\1\276\5\33\3\0"+
    "\1\33\21\0\1\33\5\0\13\33\1\277\15\33\3\0"+
    "\1\33\21\0\1\33\5\0\7\33\1\300\21\33\3\0"+
    "\1\33\16\0\1\301\2\0\1\301\63\0\1\302\63\0"+
    "\1\33\5\0\13\33\1\303\15\33\3\0\1\33\21\0"+
    "\1\33\5\0\30\33\1\304\3\0\1\33\21\0\1\33"+
    "\5\0\15\33\1\305\13\33\3\0\1\33\21\0\1\33"+
    "\5\0\4\33\1\306\24\33\3\0\1\33\21\0\1\33"+
    "\5\0\23\33\1\307\5\33\3\0\1\33\21\0\1\33"+
    "\5\0\21\33\1\310\7\33\3\0\1\33\21\0\1\33"+
    "\5\0\23\33\1\311\5\33\3\0\1\33\21\0\1\33"+
    "\5\0\21\33\1\312\7\33\3\0\1\33\21\0\1\33"+
    "\5\0\23\33\1\313\5\33\3\0\1\33\21\0\1\33"+
    "\5\0\1\314\30\33\3\0\1\33\21\0\1\33\5\0"+
    "\23\33\1\315\5\33\3\0\1\33\21\0\1\33\5\0"+
    "\4\33\1\316\24\33\3\0\1\33\21\0\1\33\5\0"+
    "\15\33\1\317\13\33\3\0\1\33\21\0\1\33\5\0"+
    "\21\33\1\320\7\33\3\0\1\33\21\0\1\33\5\0"+
    "\13\33\1\321\15\33\3\0\1\33\21\0\1\33\5\0"+
    "\2\33\1\322\26\33\3\0\1\33\21\0\1\33\5\0"+
    "\4\33\1\323\24\33\3\0\1\33\21\0\1\33\5\0"+
    "\1\324\30\33\3\0\1\33\21\0\1\33\5\0\4\33"+
    "\1\325\24\33\3\0\1\33\21\0\1\33\5\0\21\33"+
    "\1\326\7\33\3\0\1\33\21\0\1\33\5\0\1\327"+
    "\30\33\3\0\1\33\21\0\1\33\5\0\15\33\1\330"+
    "\13\33\3\0\1\33\21\0\1\33\5\0\13\33\1\331"+
    "\15\33\3\0\1\33\21\0\1\33\5\0\24\33\1\332"+
    "\4\33\3\0\1\33\21\0\1\33\5\0\4\33\1\333"+
    "\24\33\3\0\1\33\21\0\1\301\52\0\1\153\6\0"+
    "\1\64\1\0\1\302\63\0\1\33\5\0\24\33\1\334"+
    "\4\33\3\0\1\33\21\0\1\33\5\0\1\335\30\33"+
    "\3\0\1\33\21\0\1\33\5\0\21\33\1\336\7\33"+
    "\3\0\1\33\21\0\1\33\5\0\24\33\1\337\4\33"+
    "\3\0\1\33\21\0\1\33\5\0\16\33\1\340\12\33"+
    "\3\0\1\33\21\0\1\33\5\0\15\33\1\341\13\33"+
    "\3\0\1\33\21\0\1\33\5\0\21\33\1\342\7\33"+
    "\3\0\1\33\21\0\1\33\5\0\10\33\1\343\20\33"+
    "\3\0\1\33\21\0\1\33\5\0\14\33\1\344\14\33"+
    "\3\0\1\33\21\0\1\33\5\0\4\33\1\345\24\33"+
    "\3\0\1\33\21\0\1\33\5\0\5\33\1\346\13\33"+
    "\1\347\7\33\3\0\1\33\21\0\1\33\5\0\23\33"+
    "\1\350\5\33\3\0\1\33\21\0\1\33\5\0\3\33"+
    "\1\351\25\33\3\0\1\33\21\0\1\33\5\0\23\33"+
    "\1\352\5\33\3\0\1\33\21\0\1\33\5\0\3\33"+
    "\1\353\25\33\3\0\1\33\21\0\1\33\5\0\3\33"+
    "\1\354\25\33\3\0\1\33\21\0\1\33\5\0\23\33"+
    "\1\355\5\33\3\0\1\33\21\0\1\33\5\0\6\33"+
    "\1\356\22\33\3\0\1\33\21\0\1\33\5\0\1\357"+
    "\30\33\3\0\1\33\21\0\1\33\5\0\23\33\1\360"+
    "\5\33\3\0\1\33\21\0\1\33\5\0\15\33\1\313"+
    "\13\33\3\0\1\33\21\0\1\33\5\0\24\33\1\361"+
    "\4\33\3\0\1\33\21\0\1\33\5\0\2\33\1\362"+
    "\26\33\3\0\1\33\21\0\1\33\5\0\1\363\30\33"+
    "\3\0\1\33\21\0\1\33\5\0\3\33\1\364\25\33"+
    "\3\0\1\33\21\0\1\33\5\0\16\33\1\365\12\33"+
    "\3\0\1\33\21\0\1\33\5\0\4\33\1\366\24\33"+
    "\3\0\1\33\21\0\1\33\5\0\1\367\30\33\3\0"+
    "\1\33\21\0\1\33\5\0\24\33\1\370\4\33\3\0"+
    "\1\33\21\0\1\33\5\0\4\33\1\371\24\33\3\0"+
    "\1\33\21\0\1\33\5\0\24\33\1\372\4\33\3\0"+
    "\1\33\21\0\1\33\5\0\13\33\1\373\15\33\3\0"+
    "\1\33\21\0\1\33\5\0\4\33\1\374\24\33\3\0"+
    "\1\33\21\0\1\33\5\0\2\33\1\375\26\33\3\0"+
    "\1\33\21\0\1\33\5\0\23\33\1\376\5\33\3\0"+
    "\1\33\21\0\1\33\5\0\13\33\1\377\15\33\3\0"+
    "\1\33\21\0\1\33\5\0\15\33\1\u0100\13\33\3\0"+
    "\1\33\21\0\1\33\5\0\15\33\1\u0101\13\33\3\0"+
    "\1\33\21\0\1\33\5\0\2\33\1\u0102\26\33\3\0"+
    "\1\33\21\0\1\33\5\0\17\33\1\u0103\11\33\3\0"+
    "\1\33\21\0\1\33\5\0\21\33\1\u0104\7\33\3\0"+
    "\1\33\21\0\1\33\5\0\23\33\1\u0105\5\33\3\0"+
    "\1\33\21\0\1\33\5\0\16\33\1\u0106\12\33\3\0"+
    "\1\33\21\0\1\33\5\0\23\33\1\u0107\5\33\3\0"+
    "\1\33\21\0\1\33\5\0\4\33\1\u0108\24\33\3\0"+
    "\1\33\21\0\1\33\5\0\23\33\1\u0109\5\33\3\0"+
    "\1\33\21\0\1\33\5\0\4\33\1\u010a\24\33\3\0"+
    "\1\33\21\0\1\33\5\0\16\33\1\u010b\12\33\3\0"+
    "\1\33\21\0\1\33\5\0\21\33\1\u010c\7\33\3\0"+
    "\1\33\21\0\1\33\5\0\1\u010d\30\33\3\0\1\33"+
    "\21\0\1\33\5\0\21\33\1\u010e\7\33\3\0\1\33"+
    "\21\0\1\33\5\0\23\33\1\u010f\5\33\3\0\1\33"+
    "\21\0\1\33\5\0\10\33\1\u0110\20\33\3\0\1\33"+
    "\21\0\1\33\5\0\16\33\1\u0111\12\33\3\0\1\33"+
    "\21\0\1\33\5\0\15\33\1\u0112\13\33\3\0\1\33"+
    "\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10452];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\2\1\1\11"+
    "\1\1\2\11\1\1\2\11\1\1\1\11\26\1\3\11"+
    "\1\1\1\0\1\11\1\0\3\11\1\0\1\1\3\11"+
    "\56\1\1\0\1\11\4\0\61\1\1\0\165\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  absScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error");
            }
          // fall through
          case 86: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 87: break;
          case 3:
            { System.out.print(yytext());
            }
          // fall through
          case 88: break;
          case 4:
            { System.out.println("OP_OPENPARENTHESIS");
            }
          // fall through
          case 89: break;
          case 5:
            { System.out.println("OR_CLOSEPARENTHESIS");
            }
          // fall through
          case 90: break;
          case 6:
            { System.out.println("OP_MULT");
            }
          // fall through
          case 91: break;
          case 7:
            { System.out.println("OP_SUM");
            }
          // fall through
          case 92: break;
          case 8:
            { System.out.println("OP_COMMA");
            }
          // fall through
          case 93: break;
          case 9:
            { System.out.println("OP_MINUS");
            }
          // fall through
          case 94: break;
          case 10:
            { System.out.println("OP_PERIOD");
            }
          // fall through
          case 95: break;
          case 11:
            { System.out.println("OP_SLASH");
            }
          // fall through
          case 96: break;
          case 12:
            { System.out.println("LITERAL");
            }
          // fall through
          case 97: break;
          case 13:
            { System.out.println("OP_COLON");
            }
          // fall through
          case 98: break;
          case 14:
            { System.out.println("OP_SEMICOLON");
            }
          // fall through
          case 99: break;
          case 15:
            { System.out.println("OP_LESS");
            }
          // fall through
          case 100: break;
          case 16:
            { System.out.println("OP_EQUALS");
            }
          // fall through
          case 101: break;
          case 17:
            { System.out.println("OP_GREATER");
            }
          // fall through
          case 102: break;
          case 18:
            { System.out.println("IDENTIFIER");
            }
          // fall through
          case 103: break;
          case 19:
            { System.out.println("OP_OPENBRACKET");
            }
          // fall through
          case 104: break;
          case 20:
            { System.out.println("OP_CLOSEBRACKET");
            }
          // fall through
          case 105: break;
          case 21:
            { System.out.println("OP_POWER");
            }
          // fall through
          case 106: break;
          case 22:
            { System.out.println("OP_DOUBLEASTERISK");
            }
          // fall through
          case 107: break;
          case 23:
            { System.out.println("OP_INCREASE");
            }
          // fall through
          case 108: break;
          case 24:
            { System.out.println("OP_DECREASE");
            }
          // fall through
          case 109: break;
          case 25:
            { System.out.println("OP_LESSEQUAL");
            }
          // fall through
          case 110: break;
          case 26:
            { System.out.println("OP_TYPE");
            }
          // fall through
          case 111: break;
          case 27:
            { System.out.println("OP_GREATEREQUAL");
            }
          // fall through
          case 112: break;
          case 28:
            { System.out.println("DO");
            }
          // fall through
          case 113: break;
          case 29:
            { System.out.println("IF");
            }
          // fall through
          case 114: break;
          case 30:
            { System.out.println("IN");
            }
          // fall through
          case 115: break;
          case 31:
            { System.out.println("OF");
            }
          // fall through
          case 116: break;
          case 32:
            { System.out.println("OR");
            }
          // fall through
          case 117: break;
          case 33:
            { System.out.println("TO");
            }
          // fall through
          case 118: break;
          case 34:
            { /* Inline comment */
            }
          // fall through
          case 119: break;
          case 35:
            { System.out.println("AND");
            }
          // fall through
          case 120: break;
          case 36:
            { System.out.println("ASM");
            }
          // fall through
          case 121: break;
          case 37:
            { System.out.println("DIV");
            }
          // fall through
          case 122: break;
          case 38:
            { System.out.println("END");
            }
          // fall through
          case 123: break;
          case 39:
            { System.out.println("FOR");
            }
          // fall through
          case 124: break;
          case 40:
            { System.out.println("INT");
            }
          // fall through
          case 125: break;
          case 41:
            { System.out.println("MOD");
            }
          // fall through
          case 126: break;
          case 42:
            { System.out.println("NIL");
            }
          // fall through
          case 127: break;
          case 43:
            { System.out.println("NOT");
            }
          // fall through
          case 128: break;
          case 44:
            { System.out.println("SET");
            }
          // fall through
          case 129: break;
          case 45:
            { System.out.println("SHL");
            }
          // fall through
          case 130: break;
          case 46:
            { System.out.println("SHR");
            }
          // fall through
          case 131: break;
          case 47:
            { System.out.println("VAR");
            }
          // fall through
          case 132: break;
          case 48:
            { System.out.println("XOR");
            }
          // fall through
          case 133: break;
          case 49:
            { /* Multiblock comment */
            }
          // fall through
          case 134: break;
          case 50:
            { System.out.println("CASE");
            }
          // fall through
          case 135: break;
          case 51:
            { System.out.println("CHAR");
            }
          // fall through
          case 136: break;
          case 52:
            { System.out.println("ELSE");
            }
          // fall through
          case 137: break;
          case 53:
            { System.out.println("FILE");
            }
          // fall through
          case 138: break;
          case 54:
            { System.out.println("GOTO");
            }
          // fall through
          case 139: break;
          case 55:
            { System.out.println("THEN");
            }
          // fall through
          case 140: break;
          case 56:
            { System.out.println("TYPE");
            }
          // fall through
          case 141: break;
          case 57:
            { System.out.println("UNIT");
            }
          // fall through
          case 142: break;
          case 58:
            { System.out.println("USES");
            }
          // fall through
          case 143: break;
          case 59:
            { System.out.println("WITH");
            }
          // fall through
          case 144: break;
          case 60:
            { System.out.println("ARRAY");
            }
          // fall through
          case 145: break;
          case 61:
            { System.out.println("BEGIN");
            }
          // fall through
          case 146: break;
          case 62:
            { System.out.println("CONST");
            }
          // fall through
          case 147: break;
          case 63:
            { System.out.println("BOOL");
            }
          // fall through
          case 148: break;
          case 64:
            { System.out.println("LABEL");
            }
          // fall through
          case 149: break;
          case 65:
            { System.out.println("UNTIL");
            }
          // fall through
          case 150: break;
          case 66:
            { System.out.println("WHILE");
            }
          // fall through
          case 151: break;
          case 67:
            { System.out.println("DOWNTO");
            }
          // fall through
          case 152: break;
          case 68:
            { System.out.println("INLINE");
            }
          // fall through
          case 153: break;
          case 69:
            { System.out.println("OBJECT");
            }
          // fall through
          case 154: break;
          case 70:
            { System.out.println("PACKED");
            }
          // fall through
          case 155: break;
          case 71:
            { System.out.println("RECORD");
            }
          // fall through
          case 156: break;
          case 72:
            { System.out.println("REPEAT");
            }
          // fall through
          case 157: break;
          case 73:
            { System.out.println("STRING");
            }
          // fall through
          case 158: break;
          case 74:
            { System.out.println("FORWARD");
            }
          // fall through
          case 159: break;
          case 75:
            { System.out.println("PRIVATE");
            }
          // fall through
          case 160: break;
          case 76:
            { System.out.println("VIRTUAL");
            }
          // fall through
          case 161: break;
          case 77:
            { System.out.println("ABSOLUTE");
            }
          // fall through
          case 162: break;
          case 78:
            { System.out.println("EXTERNAL");
            }
          // fall through
          case 163: break;
          case 79:
            { System.out.println("FUNCTION");
            }
          // fall through
          case 164: break;
          case 80:
            { System.out.println("INTERFACE");
            }
          // fall through
          case 165: break;
          case 81:
            { System.out.println("INTERRUPT");
            }
          // fall through
          case 166: break;
          case 82:
            { System.out.println("PROCEDURE");
            }
          // fall through
          case 167: break;
          case 83:
            { System.out.println("DESTRUCTOR");
            }
          // fall through
          case 168: break;
          case 84:
            { System.out.println("CONSTRUCTOR");
            }
          // fall through
          case 169: break;
          case 85:
            { System.out.println("IMPLEMENTATION");
            }
          // fall through
          case 170: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java absScanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        absScanner scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new absScanner(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
