// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer.flex

// Main code
import obj.token;
// This object will contain the token name and line where is located


@SuppressWarnings("fallthrough")
public class absScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\0"+
    "\1\5\4\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\7\20\2\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\0\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\47\1\60\1\0"+
    "\1\61\1\62\1\47\1\0\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\47\1\63\1\0"+
    "\1\64\7\0\1\3\252\0\2\65\115\0\1\66\u01a8\0"+
    "\2\3\u0100\0\1\67\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\2\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\2\1\1\13\1\14"+
    "\1\15\1\16\1\17\25\20\1\21\1\22\1\23\3\1"+
    "\1\0\1\24\1\2\2\0\1\25\1\26\1\27\1\0"+
    "\1\30\2\0\1\31\1\32\1\33\5\20\1\0\5\20"+
    "\1\34\1\0\6\20\1\0\1\20\1\35\1\20\1\36"+
    "\4\20\1\0\1\20\1\37\1\40\7\20\1\41\3\20"+
    "\1\0\2\20\1\0\2\20\1\0\1\20\1\0\1\42"+
    "\1\35\1\0\1\36\3\0\1\24\1\0\1\30\1\0"+
    "\2\30\2\20\1\0\1\43\1\20\2\44\2\20\1\0"+
    "\2\20\1\0\1\45\1\20\1\45\1\20\1\0\1\46"+
    "\2\20\1\47\1\20\1\0\5\20\1\50\1\51\1\52"+
    "\1\51\4\20\1\0\2\20\1\53\1\54\1\55\5\20"+
    "\1\0\1\20\1\0\1\56\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\1\57\3\0\1\53\1\54\1\55\1\0"+
    "\1\60\2\20\1\0\2\20\1\0\2\61\1\20\1\0"+
    "\1\20\1\0\1\20\2\62\1\20\1\63\2\20\1\63"+
    "\1\64\2\20\1\0\4\20\1\0\2\20\1\0\3\20"+
    "\1\0\1\65\1\66\1\67\1\20\1\0\1\67\2\70"+
    "\1\20\1\0\1\20\1\0\2\71\2\0\2\20\1\0"+
    "\1\72\2\73\2\74\1\20\1\0\6\20\1\0\1\20"+
    "\1\75\2\20\1\0\2\20\1\0\3\20\1\0\2\76"+
    "\1\20\1\0\2\77\2\0\2\20\1\0\1\20\1\0"+
    "\1\20\1\0\1\100\3\20\1\0\1\20\2\101\2\20"+
    "\1\102\2\103\2\20\1\0\1\104\1\105\2\106\1\20"+
    "\4\0\2\20\1\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\107\1\20\1\0\3\20\1\110\1\20\1\110\2\111"+
    "\3\0\1\20\2\112\1\20\1\0\1\20\1\0\1\113"+
    "\2\114\4\20\3\0\2\20\1\0\1\20\1\0\1\20"+
    "\1\115\1\116\1\117\1\0\1\115\1\116\2\20\1\0"+
    "\2\120\1\20\1\0\1\20\2\121\1\20\1\0\2\20"+
    "\1\0\2\20\1\0\1\20\2\122\161\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[500];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\70\0\u0150"+
    "\0\u0188\0\70\0\u01c0\0\70\0\70\0\u01f8\0\u0230\0\70"+
    "\0\70\0\u0268\0\70\0\u02a0\0\u02d8\0\u0310\0\u0348\0\u0380"+
    "\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540"+
    "\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700"+
    "\0\u0738\0\70\0\70\0\70\0\u0770\0\u07a8\0\u07e0\0\250"+
    "\0\70\0\u0818\0\u0850\0\u0888\0\70\0\70\0\70\0\u08c0"+
    "\0\u08f8\0\u0930\0\u0968\0\70\0\70\0\70\0\u09a0\0\u09d8"+
    "\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98"+
    "\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58"+
    "\0\u0d90\0\u0dc8\0\u0e00\0\u09a0\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0"+
    "\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u09a0\0\u09a0\0\u0ff8\0\u1030"+
    "\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u09a0\0\u1180\0\u11b8"+
    "\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378"+
    "\0\u13b0\0\u0770\0\70\0\70\0\u13e8\0\u1420\0\u1458\0\u1490"+
    "\0\u14c8\0\160\0\u1500\0\u1538\0\u1570\0\u1570\0\u0968\0\u15a8"+
    "\0\u15e0\0\u1618\0\u15a8\0\u1650\0\u15a8\0\70\0\u1688\0\u16c0"+
    "\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u15a8\0\u17d8\0\70\0\u1810"+
    "\0\u1848\0\u15a8\0\u1880\0\u18b8\0\u18f0\0\u1928\0\u1960\0\u1998"+
    "\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u15a8\0\u15a8\0\u15a8\0\70"+
    "\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u15a8"+
    "\0\u15a8\0\u15a8\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50"+
    "\0\u1d88\0\u1dc0\0\u15a8\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8"+
    "\0\u1f10\0\u15a8\0\u1f48\0\u1f80\0\u1fb8\0\70\0\70\0\70"+
    "\0\u1ff0\0\u0888\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140"+
    "\0\u2028\0\70\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2028"+
    "\0\70\0\u2290\0\u2028\0\u22c8\0\u2300\0\70\0\u2028\0\u2338"+
    "\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8"+
    "\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2028\0\u2028"+
    "\0\u2028\0\u2680\0\u26b8\0\70\0\u2028\0\70\0\u26f0\0\u2728"+
    "\0\u2760\0\u2798\0\u2028\0\70\0\u27d0\0\u2808\0\u2840\0\u2878"+
    "\0\u28b0\0\u2840\0\u2840\0\70\0\u28e8\0\u2920\0\u2958\0\u2990"+
    "\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50"+
    "\0\u2840\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8"+
    "\0\u2d10\0\u2d48\0\u2d80\0\u2840\0\70\0\u2db8\0\u2df0\0\u2840"+
    "\0\70\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78"+
    "\0\u2fb0\0\u2fe8\0\u2e98\0\u3020\0\u3058\0\u3090\0\u30c8\0\u3100"+
    "\0\u2e98\0\70\0\u3138\0\u3170\0\u2e98\0\u2e98\0\70\0\u31a8"+
    "\0\u31e0\0\u3218\0\u2e98\0\u2e98\0\u2e98\0\70\0\u3250\0\u3288"+
    "\0\u32c0\0\u32f8\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410\0\u3448"+
    "\0\u3480\0\u34b8\0\u34f0\0\u3368\0\u3528\0\u3560\0\u3598\0\u35d0"+
    "\0\u3608\0\u3368\0\u3640\0\70\0\u3368\0\70\0\u3678\0\u36b0"+
    "\0\u36e8\0\u3720\0\u3720\0\70\0\u3758\0\u3790\0\u37c8\0\u3800"+
    "\0\u3720\0\u3720\0\70\0\u3838\0\u3870\0\u38a8\0\u38e0\0\u3918"+
    "\0\u3950\0\u3988\0\u39c0\0\u39f8\0\u3a30\0\u3a68\0\u3aa0\0\u3ad8"+
    "\0\u39c0\0\u39c0\0\u39c0\0\u3b10\0\70\0\70\0\u3b48\0\u3b80"+
    "\0\u3bb8\0\u3b48\0\70\0\u3bf0\0\u3c28\0\u3c60\0\u3c60\0\70"+
    "\0\u3c98\0\u3cd0\0\u3d08\0\u3d40\0\u3d78\0\u3db0\0\u3de8\0\u3e20"+
    "\0\u3e58\0\u3e58\0\70\0\u3e90\0\u3ec8\0\u3f00\0\u3f38\0\u3f70"+
    "\0\u3fa8\0\u3fe0\0\u4018\0\u4050\0\u4088\0\u40c0\0\u40f8\0\u4130"+
    "\0\u4168\0\u41a0\0\u41d8\0\u4210\0\u4248\0\u4280\0\u42b8\0\u42f0"+
    "\0\u4328\0\u4360\0\u4398\0\u43d0\0\u4408\0\u4440\0\u4478\0\u44b0"+
    "\0\u44e8\0\u4520\0\u4558\0\u4590\0\u45c8\0\u4600\0\u4638\0\u4670"+
    "\0\u46a8\0\u46e0\0\u4718\0\u4750\0\u4788\0\u47c0\0\u47f8\0\u4830"+
    "\0\u4868\0\u48a0\0\u48d8\0\u4910\0\u4948\0\u4980\0\u49b8\0\u49f0"+
    "\0\u4a28\0\u4a60\0\u4a98\0\u4ad0\0\u4b08\0\u4b40\0\u4b78\0\u4bb0"+
    "\0\u4be8\0\u4c20\0\u4c58\0\u4c90\0\u4cc8\0\u4d00\0\u4d38\0\u4d70"+
    "\0\u4da8\0\u4de0\0\u4e18\0\u4e50\0\u4e88\0\u4ec0\0\u4ef8\0\u4f30"+
    "\0\u4f68\0\u4fa0\0\u4fd8\0\u5010\0\u5048\0\u5080\0\u50b8\0\u50f0"+
    "\0\u5128\0\u5160\0\u5198\0\u51d0\0\u5208\0\u5240\0\u5278\0\u52b0"+
    "\0\u52e8\0\u5320\0\u5358\0\u5390\0\u53c8\0\u5400\0\u5438\0\u5470"+
    "\0\u54a8\0\u54e0\0\u5518\0\u5550\0\u5588\0\u55c0\0\u55f8\0\u5630"+
    "\0\u5668\0\u56a0\0\u56d8\0\70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[500];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\2\34\1\36"+
    "\1\37\1\40\1\41\1\42\1\34\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\34\1\52\1\53\1\54"+
    "\1\55\1\2\1\56\1\57\1\2\71\0\2\3\1\0"+
    "\1\3\1\0\1\3\63\0\1\60\2\0\1\61\11\0"+
    "\3\60\5\0\31\60\11\0\1\3\1\62\1\0\1\3"+
    "\1\0\1\3\10\0\3\63\5\0\31\63\21\0\1\64"+
    "\67\0\1\65\70\0\1\66\71\0\1\67\70\0\1\70"+
    "\1\0\2\71\1\17\11\0\1\72\22\0\1\73\26\0"+
    "\1\70\1\0\3\17\11\0\1\72\61\0\1\74\1\75"+
    "\66\0\1\76\61\0\3\77\5\0\1\77\1\100\13\77"+
    "\1\101\3\77\1\102\1\103\6\77\6\0\1\104\20\0"+
    "\3\77\5\0\4\77\1\105\24\77\27\0\3\77\5\0"+
    "\1\106\15\77\1\107\12\77\27\0\3\77\5\0\4\77"+
    "\1\110\3\77\1\111\5\77\1\112\12\77\5\0\1\113"+
    "\21\0\3\77\5\0\13\77\1\114\1\77\1\115\11\77"+
    "\1\116\1\77\27\0\3\77\5\0\10\77\1\117\5\77"+
    "\1\120\5\77\1\121\4\77\5\0\1\122\21\0\3\77"+
    "\5\0\16\77\1\123\12\77\27\0\3\77\5\0\31\77"+
    "\27\0\3\77\5\0\5\77\1\124\6\77\1\125\1\126"+
    "\13\77\27\0\3\77\5\0\1\127\30\77\27\0\3\77"+
    "\5\0\16\77\1\130\12\77\27\0\3\77\5\0\10\77"+
    "\1\131\5\77\1\132\12\77\5\0\1\133\21\0\3\77"+
    "\5\0\1\77\1\134\3\77\1\135\13\77\1\136\7\77"+
    "\27\0\3\77\5\0\1\137\20\77\1\140\7\77\27\0"+
    "\3\77\5\0\4\77\1\141\24\77\27\0\3\77\5\0"+
    "\4\77\1\142\2\77\1\143\13\77\1\144\5\77\27\0"+
    "\3\77\5\0\7\77\1\145\6\77\1\146\11\77\1\147"+
    "\27\0\3\77\5\0\15\77\1\150\4\77\1\151\6\77"+
    "\6\0\1\152\20\0\3\77\5\0\1\153\7\77\1\154"+
    "\20\77\5\0\1\155\21\0\3\77\5\0\7\77\1\156"+
    "\1\157\20\77\5\0\1\160\21\0\3\77\5\0\16\77"+
    "\1\161\12\77\10\0\64\162\1\163\3\162\34\0\1\164"+
    "\6\0\1\165\1\166\56\0\1\167\2\0\1\170\13\0"+
    "\1\171\16\0\2\3\1\0\1\3\1\0\1\172\67\0"+
    "\1\61\61\0\2\64\3\0\4\64\1\173\56\64\17\0"+
    "\3\174\63\0\1\70\1\0\2\71\1\17\11\0\1\72"+
    "\46\0\1\175\1\0\1\175\2\0\3\176\65\0\3\177"+
    "\5\0\6\177\52\0\3\200\5\0\31\200\27\0\3\200"+
    "\5\0\22\200\1\201\6\200\6\0\1\202\20\0\3\200"+
    "\5\0\3\200\1\203\25\200\27\0\3\200\5\0\21\200"+
    "\1\204\7\200\27\0\3\200\5\0\14\200\1\205\14\200"+
    "\53\0\1\206\43\0\3\200\5\0\6\200\1\207\22\200"+
    "\27\0\3\200\5\0\22\200\1\210\6\200\6\0\1\211"+
    "\20\0\3\200\5\0\15\200\1\212\13\200\27\0\3\200"+
    "\5\0\22\200\1\213\6\200\6\0\1\214\20\0\3\200"+
    "\5\0\25\200\1\215\3\200\27\0\3\200\5\0\26\200"+
    "\1\216\2\200\64\0\1\217\32\0\3\200\5\0\22\200"+
    "\1\220\6\200\6\0\1\221\20\0\3\200\5\0\3\200"+
    "\1\222\25\200\27\0\3\200\5\0\23\200\1\223\5\200"+
    "\27\0\3\200\5\0\13\200\1\224\15\200\27\0\3\200"+
    "\5\0\21\200\1\225\7\200\27\0\3\200\5\0\15\200"+
    "\1\226\13\200\52\0\1\227\44\0\3\200\5\0\23\200"+
    "\1\230\5\200\27\0\3\200\5\0\17\200\1\231\11\200"+
    "\27\0\3\200\5\0\13\200\1\232\7\200\1\233\5\200"+
    "\27\0\3\200\5\0\1\200\1\234\27\200\27\0\3\200"+
    "\5\0\3\200\1\235\25\200\27\0\3\200\5\0\13\200"+
    "\1\236\15\200\27\0\3\200\5\0\23\200\1\237\5\200"+
    "\52\0\1\240\44\0\3\200\5\0\11\200\1\241\17\200"+
    "\27\0\3\200\5\0\2\200\1\242\26\200\27\0\3\200"+
    "\5\0\10\200\1\243\5\200\1\244\12\200\5\0\1\245"+
    "\21\0\3\200\5\0\2\200\1\246\14\200\1\247\11\200"+
    "\27\0\3\200\5\0\23\200\1\250\5\200\27\0\3\200"+
    "\5\0\13\200\1\251\5\200\1\252\7\200\27\0\3\200"+
    "\5\0\21\200\1\253\7\200\27\0\3\200\5\0\4\200"+
    "\1\254\24\200\27\0\3\200\5\0\17\200\1\255\11\200"+
    "\27\0\3\200\5\0\10\200\1\256\12\200\1\257\5\200"+
    "\5\0\1\260\21\0\3\200\5\0\4\200\1\261\24\200"+
    "\43\0\1\262\53\0\3\200\5\0\21\200\1\263\7\200"+
    "\27\0\3\200\5\0\21\200\1\264\7\200\60\0\1\265"+
    "\36\0\3\200\5\0\10\200\1\266\20\200\5\0\1\267"+
    "\21\0\3\200\5\0\23\200\1\270\5\200\62\0\1\271"+
    "\34\0\3\200\5\0\21\200\1\272\7\200\56\0\1\273"+
    "\63\0\1\274\7\0\1\275\67\0\1\276\57\0\1\277"+
    "\5\0\1\300\67\0\1\301\17\0\2\64\3\0\3\64"+
    "\1\302\1\173\56\64\17\0\3\174\11\0\1\72\53\0"+
    "\3\176\65\0\3\303\5\0\31\303\27\0\3\303\5\0"+
    "\16\303\1\304\12\303\55\0\1\305\41\0\3\303\5\0"+
    "\1\306\30\303\27\0\3\303\5\0\10\303\1\307\20\303"+
    "\5\0\1\310\21\0\3\303\5\0\4\303\1\311\24\303"+
    "\43\0\1\312\53\0\3\303\5\0\22\303\1\313\6\303"+
    "\6\0\1\314\20\0\3\303\5\0\23\303\1\315\5\303"+
    "\62\0\1\316\34\0\3\303\5\0\15\303\1\317\13\303"+
    "\27\0\3\303\5\0\4\303\1\320\24\303\43\0\1\321"+
    "\53\0\3\303\5\0\4\303\1\322\24\303\27\0\3\303"+
    "\5\0\4\303\1\323\24\303\27\0\3\303\5\0\26\303"+
    "\1\324\2\303\27\0\3\303\5\0\2\303\1\325\26\303"+
    "\43\0\1\326\53\0\3\303\5\0\16\303\1\327\12\303"+
    "\27\0\3\303\5\0\13\303\1\330\15\303\27\0\3\303"+
    "\5\0\10\303\1\331\20\303\5\0\1\332\21\0\3\303"+
    "\5\0\4\303\1\333\24\303\27\0\3\303\5\0\4\303"+
    "\1\334\24\303\27\0\3\303\5\0\4\303\1\335\24\303"+
    "\27\0\3\303\5\0\12\303\1\336\16\303\7\0\1\337"+
    "\17\0\3\303\5\0\25\303\1\340\3\303\27\0\3\303"+
    "\5\0\2\303\1\341\26\303\64\0\1\342\32\0\3\303"+
    "\5\0\16\303\1\343\12\303\27\0\3\303\5\0\4\303"+
    "\1\344\24\303\27\0\3\303\5\0\10\303\1\345\20\303"+
    "\5\0\1\346\21\0\3\303\5\0\15\303\1\347\13\303"+
    "\27\0\3\303\5\0\4\303\1\350\24\303\27\0\3\303"+
    "\5\0\23\303\1\351\5\303\27\0\3\303\5\0\10\303"+
    "\1\352\20\303\5\0\1\353\54\0\1\354\34\0\3\303"+
    "\5\0\22\303\1\355\6\303\6\0\1\356\52\0\1\356"+
    "\14\0\1\356\20\0\3\303\5\0\23\303\1\357\5\303"+
    "\62\0\1\360\34\0\3\303\5\0\13\303\1\361\15\303"+
    "\52\0\1\362\44\0\3\303\5\0\7\303\1\363\21\303"+
    "\46\0\1\364\73\0\1\365\64\0\1\332\25\0\1\332"+
    "\35\0\1\366\73\0\1\346\25\0\1\346\21\0\3\367"+
    "\5\0\31\367\27\0\3\367\5\0\13\367\1\370\15\367"+
    "\52\0\1\371\44\0\3\367\5\0\30\367\1\372\27\0"+
    "\3\367\5\0\15\367\1\373\13\367\54\0\1\374\42\0"+
    "\3\367\5\0\23\367\1\375\5\367\62\0\1\376\34\0"+
    "\3\367\5\0\21\367\1\377\7\367\60\0\1\u0100\36\0"+
    "\3\367\5\0\23\367\1\u0101\5\367\27\0\3\367\5\0"+
    "\21\367\1\u0102\7\367\27\0\3\367\5\0\1\u0103\30\367"+
    "\27\0\3\367\5\0\23\367\1\u0104\5\367\27\0\3\367"+
    "\5\0\4\367\1\u0105\24\367\27\0\3\367\5\0\15\367"+
    "\1\u0106\13\367\54\0\1\u0107\42\0\3\367\5\0\21\367"+
    "\1\u0108\7\367\27\0\3\367\5\0\13\367\1\u0109\15\367"+
    "\27\0\3\367\5\0\2\367\1\u010a\26\367\27\0\3\367"+
    "\5\0\4\367\1\u010b\24\367\43\0\1\u010c\53\0\3\367"+
    "\5\0\1\u010d\30\367\27\0\3\367\5\0\4\367\1\u010e"+
    "\24\367\37\0\1\u010f\57\0\3\367\5\0\21\367\1\u0110"+
    "\7\367\27\0\3\367\5\0\1\u0111\30\367\27\0\3\367"+
    "\5\0\15\367\1\u0112\13\367\54\0\1\u0113\42\0\3\367"+
    "\5\0\13\367\1\u0114\15\367\52\0\1\u0115\44\0\3\367"+
    "\5\0\24\367\1\u0116\4\367\63\0\1\u0117\33\0\3\367"+
    "\5\0\4\367\1\u0118\24\367\43\0\1\u0119\67\0\1\u011a"+
    "\104\0\1\u011b\36\0\3\u011c\5\0\31\u011c\27\0\3\u011c"+
    "\5\0\24\u011c\1\u011d\4\u011c\63\0\1\u011e\33\0\3\u011c"+
    "\5\0\21\u011c\1\u011f\7\u011c\60\0\1\u0120\36\0\3\u011c"+
    "\5\0\24\u011c\1\u0121\4\u011c\63\0\1\u0122\33\0\3\u011c"+
    "\5\0\16\u011c\1\u0123\12\u011c\27\0\3\u011c\5\0\15\u011c"+
    "\1\u0124\13\u011c\27\0\3\u011c\5\0\21\u011c\1\u0125\7\u011c"+
    "\27\0\3\u011c\5\0\10\u011c\1\u0126\20\u011c\5\0\1\u0127"+
    "\21\0\3\u011c\5\0\14\u011c\1\u0128\14\u011c\27\0\3\u011c"+
    "\5\0\4\u011c\1\u0129\24\u011c\43\0\1\u012a\53\0\3\u011c"+
    "\5\0\5\u011c\1\u012b\13\u011c\1\u012c\7\u011c\27\0\3\u011c"+
    "\5\0\23\u011c\1\u012d\5\u011c\27\0\3\u011c\5\0\3\u011c"+
    "\1\u012e\25\u011c\42\0\1\u012f\54\0\3\u011c\5\0\23\u011c"+
    "\1\u0130\5\u011c\27\0\3\u011c\5\0\3\u011c\1\u0131\25\u011c"+
    "\62\0\1\u0132\34\0\3\u011c\5\0\3\u011c\1\u0133\25\u011c"+
    "\27\0\3\u011c\5\0\23\u011c\1\u0134\5\u011c\27\0\3\u011c"+
    "\5\0\6\u011c\1\u0135\22\u011c\45\0\1\u0136\51\0\3\u011c"+
    "\5\0\1\u0137\30\u011c\37\0\1\u0138\103\0\1\u0139\60\0"+
    "\1\u013a\13\0\1\u013b\36\0\3\u013c\5\0\31\u013c\27\0"+
    "\3\u013c\5\0\23\u013c\1\u013d\5\u013c\62\0\1\u013e\34\0"+
    "\3\u013c\5\0\24\u013c\1\u013f\4\u013c\63\0\1\u0140\33\0"+
    "\3\u013c\5\0\2\u013c\1\u0141\26\u013c\41\0\1\u0142\55\0"+
    "\3\u013c\5\0\1\u0143\30\u013c\27\0\3\u013c\5\0\3\u013c"+
    "\1\u0144\25\u013c\27\0\3\u013c\5\0\16\u013c\1\u0145\12\u013c"+
    "\55\0\1\u0146\41\0\3\u013c\5\0\4\u013c\1\u0147\24\u013c"+
    "\27\0\3\u013c\5\0\1\u0148\30\u013c\27\0\3\u013c\5\0"+
    "\24\u013c\1\u0149\4\u013c\27\0\3\u013c\5\0\4\u013c\1\u014a"+
    "\24\u013c\27\0\3\u013c\5\0\24\u013c\1\u014b\4\u013c\43\0"+
    "\1\u014c\53\0\3\u013c\5\0\13\u013c\1\u014d\15\u013c\52\0"+
    "\1\u014e\60\0\1\u014f\63\0\1\u0150\113\0\1\u0151\33\0"+
    "\3\u0152\5\0\31\u0152\27\0\3\u0152\5\0\4\u0152\1\u0153"+
    "\24\u0152\43\0\1\u0154\53\0\3\u0152\5\0\2\u0152\1\u0155"+
    "\26\u0152\41\0\1\u0156\55\0\3\u0152\5\0\23\u0152\1\u0157"+
    "\5\u0152\62\0\1\u0158\34\0\3\u0152\5\0\13\u0152\1\u0159"+
    "\15\u0152\27\0\3\u0152\5\0\15\u0152\1\u015a\13\u0152\54\0"+
    "\1\u015b\42\0\3\u0152\5\0\15\u0152\1\u015c\13\u0152\27\0"+
    "\3\u0152\5\0\2\u0152\1\u015d\26\u0152\27\0\3\u0152\5\0"+
    "\17\u0152\1\u015e\11\u0152\27\0\3\u0152\5\0\21\u0152\1\u015f"+
    "\7\u0152\54\0\1\u0160\54\0\1\u0161\104\0\1\u0162\40\0"+
    "\3\u0163\5\0\31\u0163\27\0\3\u0163\5\0\23\u0163\1\u0164"+
    "\5\u0163\62\0\1\u0165\34\0\3\u0163\5\0\16\u0163\1\u0166"+
    "\12\u0163\55\0\1\u0167\41\0\3\u0163\5\0\23\u0163\1\u0168"+
    "\5\u0163\27\0\3\u0163\5\0\4\u0163\1\u0169\24\u0163\27\0"+
    "\3\u0163\5\0\23\u0163\1\u016a\5\u0163\27\0\3\u0163\5\0"+
    "\4\u0163\1\u016b\24\u0163\62\0\1\u016c\50\0\1\u016d\106\0"+
    "\1\u016e\34\0\3\u016f\5\0\31\u016f\27\0\3\u016f\5\0"+
    "\16\u016f\1\u0170\12\u016f\55\0\1\u0171\41\0\3\u016f\5\0"+
    "\21\u016f\1\u0172\7\u016f\60\0\1\u0173\36\0\3\u016f\5\0"+
    "\1\u0174\30\u016f\37\0\1\u0175\57\0\3\u0176\5\0\31\u0176"+
    "\27\0\3\u0176\5\0\21\u0176\1\u0177\7\u0176\60\0\1\u0178"+
    "\36\0\3\u0176\5\0\23\u0176\1\u0179\5\u0176\62\0\1\u017a"+
    "\34\0\3\u017b\5\0\31\u017b\27\0\3\u017b\5\0\10\u017b"+
    "\1\u017c\20\u017b\5\0\1\u017d\41\0\1\u017d\25\0\1\u017d"+
    "\21\0\3\u017e\5\0\31\u017e\27\0\3\u017e\5\0\16\u017e"+
    "\1\u017f\12\u017e\55\0\1\u0180\41\0\3\u0181\5\0\31\u0181"+
    "\27\0\3\u0181\5\0\15\u0181\1\u0182\13\u0181\54\0\1\u0183"+
    "\42\0\3\u0184\5\0\31\u0184\27\0\3\u0185\5\0\31\u0185"+
    "\27\0\3\u0186\5\0\31\u0186\27\0\3\u0187\5\0\31\u0187"+
    "\27\0\3\u0188\5\0\31\u0188\27\0\3\u0189\5\0\31\u0189"+
    "\27\0\3\u018a\5\0\31\u018a\27\0\3\u018b\5\0\31\u018b"+
    "\27\0\3\u018c\5\0\31\u018c\27\0\3\u018d\5\0\31\u018d"+
    "\27\0\3\u018e\5\0\31\u018e\27\0\3\u018f\5\0\31\u018f"+
    "\27\0\3\u0190\5\0\31\u0190\27\0\3\u0191\5\0\31\u0191"+
    "\27\0\3\u0192\5\0\31\u0192\27\0\3\u0193\5\0\31\u0193"+
    "\27\0\3\u0194\5\0\31\u0194\27\0\3\u0195\5\0\31\u0195"+
    "\27\0\3\u0196\5\0\31\u0196\27\0\3\u0197\5\0\31\u0197"+
    "\27\0\3\u0198\5\0\31\u0198\27\0\3\u0199\5\0\31\u0199"+
    "\27\0\3\u019a\5\0\31\u019a\27\0\3\u019b\5\0\31\u019b"+
    "\27\0\3\u019c\5\0\31\u019c\27\0\3\u019d\5\0\31\u019d"+
    "\27\0\3\u019e\5\0\31\u019e\27\0\3\u019f\5\0\31\u019f"+
    "\27\0\3\u01a0\5\0\31\u01a0\27\0\3\u01a1\5\0\31\u01a1"+
    "\27\0\3\u01a2\5\0\31\u01a2\27\0\3\u01a3\5\0\31\u01a3"+
    "\27\0\3\u01a4\5\0\31\u01a4\27\0\3\u01a5\5\0\31\u01a5"+
    "\27\0\3\u01a6\5\0\31\u01a6\27\0\3\u01a7\5\0\31\u01a7"+
    "\27\0\3\u01a8\5\0\31\u01a8\27\0\3\u01a9\5\0\31\u01a9"+
    "\27\0\3\u01aa\5\0\31\u01aa\27\0\3\u01ab\5\0\31\u01ab"+
    "\27\0\3\u01ac\5\0\31\u01ac\27\0\3\u01ad\5\0\31\u01ad"+
    "\27\0\3\u01ae\5\0\31\u01ae\27\0\3\u01af\5\0\31\u01af"+
    "\27\0\3\u01b0\5\0\31\u01b0\27\0\3\u01b1\5\0\31\u01b1"+
    "\27\0\3\u01b2\5\0\31\u01b2\27\0\3\u01b3\5\0\31\u01b3"+
    "\27\0\3\u01b4\5\0\31\u01b4\27\0\3\u01b5\5\0\31\u01b5"+
    "\27\0\3\u01b6\5\0\31\u01b6\27\0\3\u01b7\5\0\31\u01b7"+
    "\27\0\3\u01b8\5\0\31\u01b8\27\0\3\u01b9\5\0\31\u01b9"+
    "\27\0\3\u01ba\5\0\31\u01ba\27\0\3\u01bb\5\0\31\u01bb"+
    "\27\0\3\u01bc\5\0\31\u01bc\27\0\3\u01bd\5\0\31\u01bd"+
    "\27\0\3\u01be\5\0\31\u01be\27\0\3\u01bf\5\0\31\u01bf"+
    "\27\0\3\u01c0\5\0\31\u01c0\27\0\3\u01c1\5\0\31\u01c1"+
    "\27\0\3\u01c2\5\0\31\u01c2\27\0\3\u01c3\5\0\31\u01c3"+
    "\27\0\3\u01c4\5\0\31\u01c4\27\0\3\u01c5\5\0\31\u01c5"+
    "\27\0\3\u01c6\5\0\31\u01c6\27\0\3\u01c7\5\0\31\u01c7"+
    "\27\0\3\u01c8\5\0\31\u01c8\27\0\3\u01c9\5\0\31\u01c9"+
    "\27\0\3\u01ca\5\0\31\u01ca\27\0\3\u01cb\5\0\31\u01cb"+
    "\27\0\3\u01cc\5\0\31\u01cc\27\0\3\u01cd\5\0\31\u01cd"+
    "\27\0\3\u01ce\5\0\31\u01ce\27\0\3\u01cf\5\0\31\u01cf"+
    "\27\0\3\u01d0\5\0\31\u01d0\27\0\3\u01d1\5\0\31\u01d1"+
    "\27\0\3\u01d2\5\0\31\u01d2\27\0\3\u01d3\5\0\31\u01d3"+
    "\27\0\3\u01d4\5\0\31\u01d4\27\0\3\u01d5\5\0\31\u01d5"+
    "\27\0\3\u01d6\5\0\31\u01d6\27\0\3\u01d7\5\0\31\u01d7"+
    "\27\0\3\u01d8\5\0\31\u01d8\27\0\3\u01d9\5\0\31\u01d9"+
    "\27\0\3\u01da\5\0\31\u01da\27\0\3\u01db\5\0\31\u01db"+
    "\27\0\3\u01dc\5\0\31\u01dc\27\0\3\u01dd\5\0\31\u01dd"+
    "\27\0\3\u01de\5\0\31\u01de\27\0\3\u01df\5\0\31\u01df"+
    "\27\0\3\u01e0\5\0\31\u01e0\27\0\3\u01e1\5\0\31\u01e1"+
    "\27\0\3\u01e2\5\0\31\u01e2\27\0\3\u01e3\5\0\31\u01e3"+
    "\27\0\3\u01e4\5\0\31\u01e4\27\0\3\u01e5\5\0\31\u01e5"+
    "\27\0\3\u01e6\5\0\31\u01e6\27\0\3\u01e7\5\0\31\u01e7"+
    "\27\0\3\u01e8\5\0\31\u01e8\27\0\3\u01e9\5\0\31\u01e9"+
    "\27\0\3\u01ea\5\0\31\u01ea\27\0\3\u01eb\5\0\31\u01eb"+
    "\27\0\3\u01ec\5\0\31\u01ec\27\0\3\u01ed\5\0\31\u01ed"+
    "\27\0\3\u01ee\5\0\31\u01ee\27\0\3\u01ef\5\0\31\u01ef"+
    "\27\0\3\u01f0\5\0\31\u01f0\27\0\3\u01f1\5\0\31\u01f1"+
    "\27\0\3\u01f2\5\0\31\u01f2\27\0\3\u01f3\5\0\31\u01f3"+
    "\27\0\3\u01f4\5\0\31\u01f4\10\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[22288];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\2\1\1\11\1\1\2\11"+
    "\2\1\2\11\1\1\1\11\26\1\3\11\3\1\1\0"+
    "\1\11\1\1\2\0\3\11\1\0\1\1\2\0\3\11"+
    "\5\1\1\0\6\1\1\0\6\1\1\0\10\1\1\0"+
    "\16\1\1\0\2\1\1\0\2\1\1\0\1\1\1\0"+
    "\2\11\1\0\1\1\3\0\1\1\1\0\1\1\1\0"+
    "\4\1\1\0\3\1\1\11\2\1\1\0\2\1\1\0"+
    "\2\1\1\11\1\1\1\0\5\1\1\0\10\1\1\11"+
    "\4\1\1\0\12\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\3\0\3\11\1\0"+
    "\3\1\1\0\2\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\2\1\1\11\4\1\1\11\3\1\1\0"+
    "\4\1\1\0\2\1\1\0\3\1\1\0\4\1\1\0"+
    "\1\11\1\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\2\0\2\1\1\0\2\1\1\11\3\1\1\0"+
    "\6\1\1\0\4\1\1\0\2\1\1\0\3\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\2\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\4\1\1\0\2\1"+
    "\1\11\4\1\1\11\2\1\1\0\3\1\1\11\1\1"+
    "\4\0\2\1\1\0\1\1\1\0\1\1\1\0\3\1"+
    "\1\0\5\1\1\11\1\1\1\11\3\0\2\1\1\11"+
    "\1\1\1\0\1\1\1\0\2\1\1\11\4\1\3\0"+
    "\2\1\1\0\1\1\1\0\4\1\1\0\2\11\2\1"+
    "\1\0\1\1\1\11\1\1\1\0\2\1\1\11\1\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\11\160\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[500];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public absScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new token("ERROR", yytext(), yyline);
            }
          // fall through
          case 83: break;
          case 2:
            { /* Ignore */
            }
          // fall through
          case 84: break;
          case 3:
            { return new token("OP_OPENPARENTHESIS", yytext(), yyline);
            }
          // fall through
          case 85: break;
          case 4:
            { return new token("OR_CLOSEPARENTHESIS", yytext(), yyline);
            }
          // fall through
          case 86: break;
          case 5:
            { return new token("OP_MULT", yytext(), yyline);
            }
          // fall through
          case 87: break;
          case 6:
            { return new token("OP_SUM", yytext(), yyline);
            }
          // fall through
          case 88: break;
          case 7:
            { return new token("OP_COMMA", yytext(), yyline);
            }
          // fall through
          case 89: break;
          case 8:
            { return new token("OP_MINUS", yytext(), yyline);
            }
          // fall through
          case 90: break;
          case 9:
            { return new token("OP_PERIOD", yytext(), yyline);
            }
          // fall through
          case 91: break;
          case 10:
            { return new token("OP_SLASH", yytext(), yyline);
            }
          // fall through
          case 92: break;
          case 11:
            { return new token("OP_COLON", yytext(), yyline);
            }
          // fall through
          case 93: break;
          case 12:
            { return new token("OP_SEMICOLON", yytext(), yyline);
            }
          // fall through
          case 94: break;
          case 13:
            { return new token("OP_LESS", yytext(), yyline);
            }
          // fall through
          case 95: break;
          case 14:
            { return new token("OP_EQUALS", yytext(), yyline);
            }
          // fall through
          case 96: break;
          case 15:
            { return new token("OP_GREATER", yytext(), yyline);
            }
          // fall through
          case 97: break;
          case 16:
            { return new token("IDENTIFIER", yytext(), yyline);
            }
          // fall through
          case 98: break;
          case 17:
            { return new token("OP_OPENBRACKET", yytext(), yyline);
            }
          // fall through
          case 99: break;
          case 18:
            { return new token("OP_CLOSEBRACKET", yytext(), yyline);
            }
          // fall through
          case 100: break;
          case 19:
            { return new token("OP_POWER", yytext(), yyline);
            }
          // fall through
          case 101: break;
          case 20:
            { return new token("LITERAL", yytext(), yyline);
            }
          // fall through
          case 102: break;
          case 21:
            { return new token("OP_DOUBLEASTERISK", yytext(), yyline);
            }
          // fall through
          case 103: break;
          case 22:
            { return new token("OP_INCREASE", yytext(), yyline);
            }
          // fall through
          case 104: break;
          case 23:
            { return new token("OP_DECREASE", yytext(), yyline);
            }
          // fall through
          case 105: break;
          case 24:
            { return new token("NUMBER", yytext(), yyline);
            }
          // fall through
          case 106: break;
          case 25:
            { return new token("OP_LESSEQUAL", yytext(), yyline);
            }
          // fall through
          case 107: break;
          case 26:
            { return new token("OP_TYPE", yytext(), yyline);
            }
          // fall through
          case 108: break;
          case 27:
            { return new token("OP_GREATEREQUAL", yytext(), yyline);
            }
          // fall through
          case 109: break;
          case 28:
            { return new token("DO", yytext(), yyline);
            }
          // fall through
          case 110: break;
          case 29:
            { return new token("IF", yytext(), yyline);
            }
          // fall through
          case 111: break;
          case 30:
            { return new token("IN", yytext(), yyline);
            }
          // fall through
          case 112: break;
          case 31:
            { return new token("OF", yytext(), yyline);
            }
          // fall through
          case 113: break;
          case 32:
            { return new token("OR", yytext(), yyline);
            }
          // fall through
          case 114: break;
          case 33:
            { return new token("TO", yytext(), yyline);
            }
          // fall through
          case 115: break;
          case 34:
            { /* Inline comment */
            }
          // fall through
          case 116: break;
          case 35:
            { return new token("AND", yytext(), yyline);
            }
          // fall through
          case 117: break;
          case 36:
            { return new token("ASM", yytext(), yyline);
            }
          // fall through
          case 118: break;
          case 37:
            { return new token("DIV", yytext(), yyline);
            }
          // fall through
          case 119: break;
          case 38:
            { return new token("END", yytext(), yyline);
            }
          // fall through
          case 120: break;
          case 39:
            { return new token("FOR", yytext(), yyline);
            }
          // fall through
          case 121: break;
          case 40:
            { return new token("MOD", yytext(), yyline);
            }
          // fall through
          case 122: break;
          case 41:
            { return new token("NIL", yytext(), yyline);
            }
          // fall through
          case 123: break;
          case 42:
            { return new token("NOT", yytext(), yyline);
            }
          // fall through
          case 124: break;
          case 43:
            { return new token("SET", yytext(), yyline);
            }
          // fall through
          case 125: break;
          case 44:
            { return new token("SHL", yytext(), yyline);
            }
          // fall through
          case 126: break;
          case 45:
            { return new token("SHR", yytext(), yyline);
            }
          // fall through
          case 127: break;
          case 46:
            { return new token("VAR", yytext(), yyline);
            }
          // fall through
          case 128: break;
          case 47:
            { return new token("XOR", yytext(), yyline);
            }
          // fall through
          case 129: break;
          case 48:
            { /* Multiblock comment */
            }
          // fall through
          case 130: break;
          case 49:
            { return new token("CASE", yytext(), yyline);
            }
          // fall through
          case 131: break;
          case 50:
            { return new token("ELSE", yytext(), yyline);
            }
          // fall through
          case 132: break;
          case 51:
            { return new token("FILE", yytext(), yyline);
            }
          // fall through
          case 133: break;
          case 52:
            { return new token("GOTO", yytext(), yyline);
            }
          // fall through
          case 134: break;
          case 53:
            { return new token("THEN", yytext(), yyline);
            }
          // fall through
          case 135: break;
          case 54:
            { return new token("TYPE", yytext(), yyline);
            }
          // fall through
          case 136: break;
          case 55:
            { return new token("UNIT", yytext(), yyline);
            }
          // fall through
          case 137: break;
          case 56:
            { return new token("USES", yytext(), yyline);
            }
          // fall through
          case 138: break;
          case 57:
            { return new token("WITH", yytext(), yyline);
            }
          // fall through
          case 139: break;
          case 58:
            { return new token("ARRAY", yytext(), yyline);
            }
          // fall through
          case 140: break;
          case 59:
            { return new token("BEGIN", yytext(), yyline);
            }
          // fall through
          case 141: break;
          case 60:
            { return new token("CONST", yytext(), yyline);
            }
          // fall through
          case 142: break;
          case 61:
            { return new token("LABEL", yytext(), yyline);
            }
          // fall through
          case 143: break;
          case 62:
            { return new token("UNTIL", yytext(), yyline);
            }
          // fall through
          case 144: break;
          case 63:
            { return new token("WHILE", yytext(), yyline);
            }
          // fall through
          case 145: break;
          case 64:
            { return new token("DOWNTO", yytext(), yyline);
            }
          // fall through
          case 146: break;
          case 65:
            { return new token("INLINE", yytext(), yyline);
            }
          // fall through
          case 147: break;
          case 66:
            { return new token("OBJECT", yytext(), yyline);
            }
          // fall through
          case 148: break;
          case 67:
            { return new token("PACKED", yytext(), yyline);
            }
          // fall through
          case 149: break;
          case 68:
            { return new token("RECORD", yytext(), yyline);
            }
          // fall through
          case 150: break;
          case 69:
            { return new token("REPEAT", yytext(), yyline);
            }
          // fall through
          case 151: break;
          case 70:
            { return new token("STRING", yytext(), yyline);
            }
          // fall through
          case 152: break;
          case 71:
            { return new token("FORWARD", yytext(), yyline);
            }
          // fall through
          case 153: break;
          case 72:
            { return new token("PRIVATE", yytext(), yyline);
            }
          // fall through
          case 154: break;
          case 73:
            { return new token("VIRTUAL", yytext(), yyline);
            }
          // fall through
          case 155: break;
          case 74:
            { return new token("ABSOLUTE", yytext(), yyline);
            }
          // fall through
          case 156: break;
          case 75:
            { return new token("EXTERNAL", yytext(), yyline);
            }
          // fall through
          case 157: break;
          case 76:
            { return new token("FUNCTION", yytext(), yyline);
            }
          // fall through
          case 158: break;
          case 77:
            { return new token("INTERFACE", yytext(), yyline);
            }
          // fall through
          case 159: break;
          case 78:
            { return new token("INTERRUPT", yytext(), yyline);
            }
          // fall through
          case 160: break;
          case 79:
            { return new token("PROCEDURE", yytext(), yyline);
            }
          // fall through
          case 161: break;
          case 80:
            { return new token("DESTRUCTOR", yytext(), yyline);
            }
          // fall through
          case 162: break;
          case 81:
            { return new token("CONSTRUCTOR", yytext(), yyline);
            }
          // fall through
          case 163: break;
          case 82:
            { return new token("IMPLEMENTATION", yytext(), yyline);
            }
          // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
