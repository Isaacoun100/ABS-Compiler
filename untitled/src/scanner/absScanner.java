// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer.flex

// Main code
package scanner; 
import obj.token;
// This object will contain the token name and line where is located


@SuppressWarnings("fallthrough")
public class absScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\0"+
    "\1\5\4\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\13\1\16\11\17\2\13\1\20\1\21"+
    "\1\22\2\0\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\43\1\13\1\0\2\13\1\43"+
    "\1\0\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\43\1\54\1\0\1\55\7\0\1\3"+
    "\252\0\2\56\115\0\1\57\u0198\0\1\60\1\61\2\0"+
    "\1\62\1\63\12\0\2\3\u0100\0\1\64\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\5\3\2\4\2\3\25\5"+
    "\5\1\1\0\1\6\5\0\5\5\1\0\6\5\1\7"+
    "\1\0\4\5\1\0\1\5\1\7\1\5\1\7\3\5"+
    "\1\0\12\5\1\0\2\5\1\0\3\5\2\0\1\10"+
    "\1\7\1\0\1\7\6\0\1\4\1\0\2\4\2\5"+
    "\1\0\1\7\3\5\1\0\3\5\1\0\2\5\1\7"+
    "\4\5\1\7\5\5\1\0\10\5\1\0\1\5\1\0"+
    "\3\5\4\0\1\7\1\0\1\11\2\5\1\0\2\5"+
    "\1\0\1\7\1\5\1\0\1\5\1\0\6\5\1\0"+
    "\4\5\1\0\2\5\1\0\3\5\1\0\1\5\1\0"+
    "\1\5\2\0\2\5\1\0\3\7\1\5\1\0\11\5"+
    "\1\0\3\5\1\0\1\5\3\0\4\5\1\0\1\7"+
    "\3\5\1\0\6\5\3\0\4\5\1\0\1\5\1\7"+
    "\5\5\3\0\1\5\1\7\2\5\1\0\3\5\1\0"+
    "\3\5\1\0\1\5\1\7\1\0\2\5\1\7\1\5"+
    "\1\0\1\5\1\7\1\5\1\0\5\5\1\7\161\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\65\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636"+
    "\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de"+
    "\0\237\0\65\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c"+
    "\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4"+
    "\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c"+
    "\0\u0ca1\0\u0cd6\0\u0d0b\0\u091c\0\u0d40\0\u0d75\0\u0daa\0\u0ddf"+
    "\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87"+
    "\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f"+
    "\0\u1164\0\u1199\0\u11ce\0\u1203\0\u070a\0\65\0\65\0\u1238"+
    "\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u07de\0\u1376\0\u13ab"+
    "\0\u13e0\0\u13e0\0\u08e7\0\u1415\0\u144a\0\u147f\0\u1415\0\u14b4"+
    "\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c"+
    "\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804"+
    "\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac"+
    "\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54"+
    "\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc"+
    "\0\u1d31\0\u0848\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f"+
    "\0\u1d66\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2"+
    "\0\u2017\0\u204c\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a"+
    "\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332"+
    "\0\u2367\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da"+
    "\0\u2470\0\u250f\0\u1f43\0\u2544\0\u2579\0\u25ae\0\u25e3\0\u2618"+
    "\0\u264d\0\u2682\0\u26b7\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0"+
    "\0\u27f5\0\u282a\0\u285f\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968"+
    "\0\u299d\0\u29d2\0\u2a07\0\u2a3c\0\u2968\0\u2a71\0\u2aa6\0\u2adb"+
    "\0\u2b10\0\u2b45\0\u2b7a\0\u2baf\0\u2be4\0\u2c19\0\u2c4e\0\u2c83"+
    "\0\u2cb8\0\u2ced\0\u2d22\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6\0\u2e2b"+
    "\0\u2d22\0\u2e60\0\u2e95\0\u2eca\0\u2eff\0\u2f34\0\u2f69\0\u2f9e"+
    "\0\u2fd3\0\u3008\0\u3008\0\u303d\0\u3072\0\u30a7\0\u30dc\0\u3111"+
    "\0\u3146\0\u317b\0\u31b0\0\u31e5\0\u321a\0\u324f\0\u3284\0\u31b0"+
    "\0\u32b9\0\u32ee\0\u3323\0\u32ee\0\u3358\0\u338d\0\u33c2\0\u33c2"+
    "\0\u33f7\0\u342c\0\u3461\0\u3496\0\u34cb\0\u3500\0\u3535\0\u3535"+
    "\0\u356a\0\u359f\0\u35d4\0\u3609\0\u363e\0\u3673\0\u36a8\0\u36dd"+
    "\0\u3712\0\u3747\0\u377c\0\u37b1\0\u37e6\0\u381b\0\u3850\0\u3885"+
    "\0\u38ba\0\u38ef\0\u3924\0\u3959\0\u398e\0\u39c3\0\u39f8\0\u3a2d"+
    "\0\u3a62\0\u3a97\0\u3acc\0\u3b01\0\u3b36\0\u3b6b\0\u3ba0\0\u3bd5"+
    "\0\u3c0a\0\u3c3f\0\u3c74\0\u3ca9\0\u3cde\0\u3d13\0\u3d48\0\u3d7d"+
    "\0\u3db2\0\u3de7\0\u3e1c\0\u3e51\0\u3e86\0\u3ebb\0\u3ef0\0\u3f25"+
    "\0\u3f5a\0\u3f8f\0\u3fc4\0\u3ff9\0\u402e\0\u4063\0\u4098\0\u40cd"+
    "\0\u4102\0\u4137\0\u416c\0\u41a1\0\u41d6\0\u420b\0\u4240\0\u4275"+
    "\0\u42aa\0\u42df\0\u4314\0\u4349\0\u437e\0\u43b3\0\u43e8\0\u441d"+
    "\0\u4452\0\u4487\0\u44bc\0\u44f1\0\u4526\0\u455b\0\u4590\0\u45c5"+
    "\0\u45fa\0\u462f\0\u4664\0\u4699\0\u46ce\0\u4703\0\u4738\0\u476d"+
    "\0\u47a2\0\u47d7\0\u480c\0\u4841\0\u4876\0\u48ab\0\u48e0\0\u4915"+
    "\0\u494a\0\u497f\0\u49b4\0\u49e9\0\u4a1e\0\u4a53\0\u4a88\0\u4abd"+
    "\0\u4af2\0\u4b27\0\u4b5c\0\u4b91\0\u4bc6\0\u4bfb\0\u4c30\0\u4c65"+
    "\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\7\1\12\1\7\1\13\1\14\1\15"+
    "\1\7\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\26\1\30\1\31\1\32\1\33"+
    "\1\34\1\26\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\26\1\44\1\2\1\45\1\46\1\47\1\2"+
    "\1\50\2\2\66\0\2\3\1\0\1\3\64\0\1\51"+
    "\1\52\10\0\2\51\3\0\31\51\15\0\1\53\11\0"+
    "\2\53\3\0\31\53\22\0\1\54\64\0\1\7\65\0"+
    "\1\7\66\0\1\7\65\0\1\55\2\14\7\0\1\56"+
    "\22\0\1\57\27\0\1\55\2\14\7\0\1\56\56\0"+
    "\2\7\63\0\1\7\61\0\2\60\3\0\1\60\1\61"+
    "\13\60\1\62\3\60\1\63\1\64\6\60\3\0\1\65"+
    "\23\0\2\60\3\0\4\60\1\66\24\60\27\0\2\60"+
    "\3\0\1\67\6\60\1\70\6\60\1\71\12\60\27\0"+
    "\2\60\3\0\4\60\1\72\3\60\1\73\5\60\1\74"+
    "\12\60\2\0\1\75\24\0\2\60\3\0\13\60\1\67"+
    "\1\60\1\62\11\60\1\76\1\60\27\0\2\60\3\0"+
    "\10\60\1\77\5\60\1\100\5\60\1\101\4\60\2\0"+
    "\1\102\24\0\2\60\3\0\16\60\1\103\12\60\27\0"+
    "\2\60\3\0\31\60\27\0\2\60\3\0\5\60\1\104"+
    "\6\60\1\105\1\106\13\60\27\0\2\60\3\0\1\107"+
    "\30\60\27\0\2\60\3\0\16\60\1\62\12\60\27\0"+
    "\2\60\3\0\10\60\1\110\5\60\1\111\12\60\2\0"+
    "\1\112\24\0\2\60\3\0\1\60\1\113\3\60\1\104"+
    "\13\60\1\104\7\60\27\0\2\60\3\0\1\114\20\60"+
    "\1\115\7\60\27\0\2\60\3\0\4\60\1\116\24\60"+
    "\27\0\2\60\3\0\4\60\1\111\2\60\1\117\13\60"+
    "\1\120\5\60\27\0\2\60\3\0\7\60\1\121\6\60"+
    "\1\104\11\60\1\122\27\0\2\60\3\0\15\60\1\123"+
    "\4\60\1\124\6\60\3\0\1\125\23\0\2\60\3\0"+
    "\1\126\7\60\1\127\20\60\2\0\1\130\24\0\2\60"+
    "\3\0\7\60\1\131\1\132\10\60\1\133\7\60\2\0"+
    "\1\134\24\0\2\60\3\0\16\60\1\126\12\60\11\0"+
    "\55\135\1\136\7\135\30\0\1\137\6\0\1\140\1\141"+
    "\53\0\1\142\2\0\1\143\13\0\1\144\22\0\1\145"+
    "\11\0\2\145\3\0\31\145\15\0\1\146\11\0\2\146"+
    "\3\0\31\146\7\0\1\52\7\0\1\52\56\0\2\54"+
    "\2\0\5\54\1\147\53\54\16\0\2\150\57\0\1\151"+
    "\1\0\1\151\1\0\2\152\63\0\2\153\3\0\6\153"+
    "\52\0\2\154\3\0\31\154\27\0\2\154\3\0\22\154"+
    "\1\155\6\154\3\0\1\156\23\0\2\154\3\0\3\154"+
    "\1\157\25\154\27\0\2\154\3\0\21\154\1\160\7\154"+
    "\27\0\2\154\3\0\14\154\1\157\14\154\50\0\1\137"+
    "\43\0\2\154\3\0\6\154\1\161\22\154\27\0\2\154"+
    "\3\0\22\154\1\162\6\154\3\0\1\163\23\0\2\154"+
    "\3\0\1\164\30\154\27\0\2\154\3\0\15\154\1\165"+
    "\13\154\27\0\2\154\3\0\22\154\1\166\6\154\3\0"+
    "\1\167\23\0\2\154\3\0\25\154\1\157\3\154\27\0"+
    "\2\154\3\0\26\154\1\170\2\154\61\0\1\137\32\0"+
    "\2\154\3\0\23\154\1\171\5\154\27\0\2\154\3\0"+
    "\13\154\1\162\15\154\27\0\2\154\3\0\21\154\1\172"+
    "\7\154\27\0\2\154\3\0\15\154\1\173\13\154\47\0"+
    "\1\163\44\0\2\154\3\0\23\154\1\174\5\154\27\0"+
    "\2\154\3\0\17\154\1\175\11\154\27\0\2\154\3\0"+
    "\13\154\1\176\7\154\1\177\5\154\27\0\2\154\3\0"+
    "\1\154\1\200\27\154\27\0\2\154\3\0\13\154\1\157"+
    "\15\154\27\0\2\154\3\0\23\154\1\157\5\154\47\0"+
    "\1\137\44\0\2\154\3\0\11\154\1\201\17\154\27\0"+
    "\2\154\3\0\2\154\1\202\26\154\27\0\2\154\3\0"+
    "\10\154\1\203\5\154\1\204\12\154\2\0\1\205\24\0"+
    "\2\154\3\0\1\206\1\154\1\207\14\154\1\210\11\154"+
    "\27\0\2\154\3\0\13\154\1\157\5\154\1\157\7\154"+
    "\27\0\2\154\3\0\21\154\1\211\7\154\27\0\2\154"+
    "\3\0\4\154\1\212\24\154\27\0\2\154\3\0\17\154"+
    "\1\162\11\154\27\0\2\154\3\0\10\154\1\213\12\154"+
    "\1\214\5\154\2\0\1\142\24\0\2\154\3\0\4\154"+
    "\1\215\24\154\40\0\1\216\53\0\2\154\3\0\21\154"+
    "\1\157\7\154\27\0\2\154\3\0\21\154\1\217\7\154"+
    "\55\0\1\220\36\0\2\154\3\0\10\154\1\221\20\154"+
    "\2\0\1\102\24\0\2\154\3\0\23\154\1\222\5\154"+
    "\27\0\2\154\3\0\10\154\1\223\20\154\2\0\1\224"+
    "\54\0\1\225\60\0\1\226\60\0\1\227\7\0\1\230"+
    "\64\0\1\137\54\0\1\137\5\0\1\137\64\0\1\231"+
    "\101\0\1\52\3\0\2\54\2\0\4\54\1\232\1\147"+
    "\53\54\16\0\2\150\7\0\1\56\53\0\2\152\63\0"+
    "\2\233\3\0\31\233\27\0\2\233\3\0\16\233\1\234"+
    "\12\233\52\0\1\235\41\0\2\233\3\0\1\236\30\233"+
    "\27\0\2\233\3\0\10\233\1\237\20\233\2\0\1\240"+
    "\24\0\2\233\3\0\4\233\1\241\24\233\40\0\1\137"+
    "\53\0\2\233\3\0\21\233\1\241\7\233\27\0\2\233"+
    "\3\0\22\233\1\242\6\233\3\0\1\243\23\0\2\233"+
    "\3\0\23\233\1\244\5\233\57\0\1\245\34\0\2\233"+
    "\3\0\15\233\1\246\13\233\27\0\2\233\3\0\4\233"+
    "\1\247\24\233\27\0\2\233\3\0\26\233\1\250\2\233"+
    "\27\0\2\233\3\0\2\233\1\251\26\233\27\0\2\233"+
    "\3\0\16\233\1\241\12\233\27\0\2\233\3\0\13\233"+
    "\1\252\15\233\27\0\2\233\3\0\10\233\1\253\20\233"+
    "\2\0\1\254\24\0\2\233\3\0\4\233\1\255\24\233"+
    "\27\0\2\233\3\0\4\233\1\256\24\233\27\0\2\233"+
    "\3\0\4\233\1\257\24\233\27\0\2\233\3\0\12\233"+
    "\1\260\16\233\10\0\1\261\16\0\2\233\3\0\25\233"+
    "\1\262\3\233\27\0\2\233\3\0\2\233\1\263\26\233"+
    "\61\0\1\264\32\0\2\233\3\0\3\233\1\241\7\233"+
    "\1\241\15\233\27\0\2\233\3\0\16\233\1\265\12\233"+
    "\27\0\2\233\3\0\4\233\1\266\24\233\27\0\2\233"+
    "\3\0\10\233\1\267\20\233\2\0\1\270\24\0\2\233"+
    "\3\0\15\233\1\241\13\233\27\0\2\233\3\0\23\233"+
    "\1\241\5\233\27\0\2\233\3\0\10\233\1\256\20\233"+
    "\2\0\1\112\24\0\2\233\3\0\22\233\1\241\6\233"+
    "\3\0\1\137\52\0\1\137\11\0\1\137\23\0\2\233"+
    "\3\0\23\233\1\271\5\233\57\0\1\272\34\0\2\233"+
    "\3\0\13\233\1\273\15\233\27\0\2\233\3\0\7\233"+
    "\1\241\21\233\27\0\2\233\3\0\23\233\1\273\5\233"+
    "\57\0\1\163\50\0\1\137\70\0\1\274\61\0\1\254"+
    "\22\0\1\254\35\0\1\275\70\0\1\270\22\0\1\270"+
    "\24\0\2\276\3\0\31\276\27\0\2\276\3\0\13\276"+
    "\1\277\15\276\47\0\1\300\44\0\2\276\3\0\30\276"+
    "\1\301\27\0\2\276\3\0\15\276\1\301\13\276\51\0"+
    "\1\137\42\0\2\276\3\0\23\276\1\302\5\276\57\0"+
    "\1\303\34\0\2\276\3\0\21\276\1\304\7\276\55\0"+
    "\1\305\36\0\2\276\3\0\23\276\1\306\5\276\27\0"+
    "\2\276\3\0\21\276\1\307\7\276\27\0\2\276\3\0"+
    "\1\310\30\276\27\0\2\276\3\0\23\276\1\311\5\276"+
    "\27\0\2\276\3\0\4\276\1\312\24\276\27\0\2\276"+
    "\3\0\15\276\1\313\13\276\51\0\1\163\42\0\2\276"+
    "\3\0\21\276\1\314\7\276\27\0\2\276\3\0\13\276"+
    "\1\301\15\276\27\0\2\276\3\0\2\276\1\315\26\276"+
    "\27\0\2\276\3\0\4\276\1\316\24\276\40\0\1\317"+
    "\53\0\2\276\3\0\1\320\30\276\27\0\2\276\3\0"+
    "\4\276\1\321\24\276\34\0\1\224\57\0\2\276\3\0"+
    "\21\276\1\316\7\276\27\0\2\276\3\0\1\315\30\276"+
    "\27\0\2\276\3\0\15\276\1\322\13\276\51\0\1\323"+
    "\42\0\2\276\3\0\24\276\1\324\4\276\60\0\1\325"+
    "\33\0\2\276\3\0\4\276\1\301\24\276\40\0\1\326"+
    "\101\0\1\327\36\0\2\330\3\0\31\330\27\0\2\330"+
    "\3\0\24\330\1\331\4\330\60\0\1\224\33\0\2\330"+
    "\3\0\21\330\1\332\7\330\27\0\2\330\3\0\24\330"+
    "\1\333\4\330\60\0\1\334\33\0\2\330\3\0\16\330"+
    "\1\335\12\330\27\0\2\330\3\0\15\330\1\336\13\330"+
    "\27\0\2\330\3\0\21\330\1\337\7\330\27\0\2\330"+
    "\3\0\10\330\1\340\20\330\2\0\1\341\24\0\2\330"+
    "\3\0\14\330\1\342\14\330\27\0\2\330\3\0\4\330"+
    "\1\335\24\330\27\0\2\330\3\0\5\330\1\343\13\330"+
    "\1\344\7\330\27\0\2\330\3\0\23\330\1\335\5\330"+
    "\27\0\2\330\3\0\3\330\1\335\25\330\37\0\1\137"+
    "\54\0\2\330\3\0\23\330\1\345\5\330\27\0\2\330"+
    "\3\0\3\330\1\346\25\330\27\0\2\330\3\0\6\330"+
    "\1\335\22\330\42\0\1\137\51\0\2\330\3\0\1\347"+
    "\30\330\34\0\1\112\100\0\1\350\55\0\1\351\13\0"+
    "\1\352\36\0\2\353\3\0\31\353\27\0\2\353\3\0"+
    "\23\353\1\354\5\353\27\0\2\353\3\0\24\353\1\355"+
    "\4\353\27\0\2\353\3\0\2\353\1\356\26\353\36\0"+
    "\1\357\55\0\2\353\3\0\1\360\30\353\27\0\2\353"+
    "\3\0\3\353\1\361\25\353\27\0\2\353\3\0\16\353"+
    "\1\362\12\353\52\0\1\240\41\0\2\353\3\0\4\353"+
    "\1\363\24\353\27\0\2\353\3\0\1\364\30\353\27\0"+
    "\2\353\3\0\24\353\1\365\4\353\27\0\2\353\3\0"+
    "\4\353\1\361\24\353\27\0\2\353\3\0\24\353\1\366"+
    "\4\353\27\0\2\353\3\0\13\353\1\361\15\353\40\0"+
    "\1\367\60\0\1\370\110\0\1\371\33\0\2\372\3\0"+
    "\31\372\27\0\2\372\3\0\4\372\1\373\24\372\27\0"+
    "\2\372\3\0\2\372\1\374\26\372\27\0\2\372\3\0"+
    "\23\372\1\375\5\372\57\0\1\376\34\0\2\372\3\0"+
    "\13\372\1\373\15\372\27\0\2\372\3\0\15\372\1\373"+
    "\13\372\27\0\2\372\3\0\15\372\1\377\13\372\27\0"+
    "\2\372\3\0\2\372\1\u0100\26\372\27\0\2\372\3\0"+
    "\17\372\1\u0101\11\372\27\0\2\372\3\0\21\372\1\u0100"+
    "\7\372\51\0\1\u0102\51\0\1\163\101\0\1\142\40\0"+
    "\2\u0103\3\0\31\u0103\27\0\2\u0103\3\0\23\u0103\1\u0104"+
    "\5\u0103\27\0\2\u0103\3\0\16\u0103\1\u0105\12\u0103\52\0"+
    "\1\u0106\41\0\2\u0103\3\0\23\u0103\1\u0107\5\u0103\27\0"+
    "\2\u0103\3\0\4\u0103\1\u0108\24\u0103\27\0\2\u0103\3\0"+
    "\23\u0103\1\u0108\5\u0103\57\0\1\u0109\34\0\2\u010a\3\0"+
    "\31\u010a\27\0\2\u010a\3\0\16\u010a\1\u010b\12\u010a\27\0"+
    "\2\u010a\3\0\21\u010a\1\u010c\7\u010a\55\0\1\137\36\0"+
    "\2\u010a\3\0\1\u010d\30\u010a\34\0\1\u010e\57\0\2\u010f"+
    "\3\0\31\u010f\27\0\2\u010f\3\0\21\u010f\1\u0110\7\u010f"+
    "\27\0\2\u010f\3\0\23\u010f\1\u0111\5\u010f\57\0\1\u0112"+
    "\34\0\2\u0113\3\0\31\u0113\27\0\2\u0113\3\0\10\u0113"+
    "\1\u0114\20\u0113\2\0\1\341\41\0\1\341\22\0\1\341"+
    "\24\0\2\u0115\3\0\31\u0115\27\0\2\u0115\3\0\16\u0115"+
    "\1\u0116\12\u0115\27\0\2\u0117\3\0\31\u0117\27\0\2\u0117"+
    "\3\0\15\u0117\1\u0118\13\u0117\27\0\2\u0119\3\0\31\u0119"+
    "\27\0\2\u011a\3\0\31\u011a\27\0\2\u011b\3\0\31\u011b"+
    "\27\0\2\u011c\3\0\31\u011c\27\0\2\u011d\3\0\31\u011d"+
    "\27\0\2\u011e\3\0\31\u011e\27\0\2\u011f\3\0\31\u011f"+
    "\27\0\2\u0120\3\0\31\u0120\27\0\2\u0121\3\0\31\u0121"+
    "\27\0\2\u0122\3\0\31\u0122\27\0\2\u0123\3\0\31\u0123"+
    "\27\0\2\u0124\3\0\31\u0124\27\0\2\u0125\3\0\31\u0125"+
    "\27\0\2\u0126\3\0\31\u0126\27\0\2\u0127\3\0\31\u0127"+
    "\27\0\2\u0128\3\0\31\u0128\27\0\2\u0129\3\0\31\u0129"+
    "\27\0\2\u012a\3\0\31\u012a\27\0\2\u012b\3\0\31\u012b"+
    "\27\0\2\u012c\3\0\31\u012c\27\0\2\u012d\3\0\31\u012d"+
    "\27\0\2\u012e\3\0\31\u012e\27\0\2\u012f\3\0\31\u012f"+
    "\27\0\2\u0130\3\0\31\u0130\27\0\2\u0131\3\0\31\u0131"+
    "\27\0\2\u0132\3\0\31\u0132\27\0\2\u0133\3\0\31\u0133"+
    "\27\0\2\u0134\3\0\31\u0134\27\0\2\u0135\3\0\31\u0135"+
    "\27\0\2\u0136\3\0\31\u0136\27\0\2\u0137\3\0\31\u0137"+
    "\27\0\2\u0138\3\0\31\u0138\27\0\2\u0139\3\0\31\u0139"+
    "\27\0\2\u013a\3\0\31\u013a\27\0\2\u013b\3\0\31\u013b"+
    "\27\0\2\u013c\3\0\31\u013c\27\0\2\u013d\3\0\31\u013d"+
    "\27\0\2\u013e\3\0\31\u013e\27\0\2\u013f\3\0\31\u013f"+
    "\27\0\2\u0140\3\0\31\u0140\27\0\2\u0141\3\0\31\u0141"+
    "\27\0\2\u0142\3\0\31\u0142\27\0\2\u0143\3\0\31\u0143"+
    "\27\0\2\u0144\3\0\31\u0144\27\0\2\u0145\3\0\31\u0145"+
    "\27\0\2\u0146\3\0\31\u0146\27\0\2\u0147\3\0\31\u0147"+
    "\27\0\2\u0148\3\0\31\u0148\27\0\2\u0149\3\0\31\u0149"+
    "\27\0\2\u014a\3\0\31\u014a\27\0\2\u014b\3\0\31\u014b"+
    "\27\0\2\u014c\3\0\31\u014c\27\0\2\u014d\3\0\31\u014d"+
    "\27\0\2\u014e\3\0\31\u014e\27\0\2\u014f\3\0\31\u014f"+
    "\27\0\2\u0150\3\0\31\u0150\27\0\2\u0151\3\0\31\u0151"+
    "\27\0\2\u0152\3\0\31\u0152\27\0\2\u0153\3\0\31\u0153"+
    "\27\0\2\u0154\3\0\31\u0154\27\0\2\u0155\3\0\31\u0155"+
    "\27\0\2\u0156\3\0\31\u0156\27\0\2\u0157\3\0\31\u0157"+
    "\27\0\2\u0158\3\0\31\u0158\27\0\2\u0159\3\0\31\u0159"+
    "\27\0\2\u015a\3\0\31\u015a\27\0\2\u015b\3\0\31\u015b"+
    "\27\0\2\u015c\3\0\31\u015c\27\0\2\u015d\3\0\31\u015d"+
    "\27\0\2\u015e\3\0\31\u015e\27\0\2\u015f\3\0\31\u015f"+
    "\27\0\2\u0160\3\0\31\u0160\27\0\2\u0161\3\0\31\u0161"+
    "\27\0\2\u0162\3\0\31\u0162\27\0\2\u0163\3\0\31\u0163"+
    "\27\0\2\u0164\3\0\31\u0164\27\0\2\u0165\3\0\31\u0165"+
    "\27\0\2\u0166\3\0\31\u0166\27\0\2\u0167\3\0\31\u0167"+
    "\27\0\2\u0168\3\0\31\u0168\27\0\2\u0169\3\0\31\u0169"+
    "\27\0\2\u016a\3\0\31\u016a\27\0\2\u016b\3\0\31\u016b"+
    "\27\0\2\u016c\3\0\31\u016c\27\0\2\u016d\3\0\31\u016d"+
    "\27\0\2\u016e\3\0\31\u016e\27\0\2\u016f\3\0\31\u016f"+
    "\27\0\2\u0170\3\0\31\u0170\27\0\2\u0171\3\0\31\u0171"+
    "\27\0\2\u0172\3\0\31\u0172\27\0\2\u0173\3\0\31\u0173"+
    "\27\0\2\u0174\3\0\31\u0174\27\0\2\u0175\3\0\31\u0175"+
    "\27\0\2\u0176\3\0\31\u0176\27\0\2\u0177\3\0\31\u0177"+
    "\27\0\2\u0178\3\0\31\u0178\27\0\2\u0179\3\0\31\u0179"+
    "\27\0\2\u017a\3\0\31\u017a\27\0\2\u017b\3\0\31\u017b"+
    "\27\0\2\u017c\3\0\31\u017c\27\0\2\u017d\3\0\31\u017d"+
    "\27\0\2\u017e\3\0\31\u017e\27\0\2\u017f\3\0\31\u017f"+
    "\27\0\2\u0180\3\0\31\u0180\27\0\2\u0181\3\0\31\u0181"+
    "\27\0\2\u0182\3\0\31\u0182\27\0\2\u0183\3\0\31\u0183"+
    "\27\0\2\u0184\3\0\31\u0184\27\0\2\u0185\3\0\31\u0185"+
    "\27\0\2\u0186\3\0\31\u0186\27\0\2\u0187\3\0\31\u0187"+
    "\27\0\2\u0188\3\0\31\u0188\27\0\2\u0189\3\0\31\u0189"+
    "\11\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[19610];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\41\1\1\0\1\11\5\0"+
    "\5\1\1\0\7\1\1\0\4\1\1\0\7\1\1\0"+
    "\12\1\1\0\2\1\1\0\3\1\2\0\2\11\1\0"+
    "\1\1\6\0\1\1\1\0\4\1\1\0\4\1\1\0"+
    "\3\1\1\0\15\1\1\0\10\1\1\0\1\1\1\0"+
    "\3\1\4\0\1\1\1\0\3\1\1\0\2\1\1\0"+
    "\2\1\1\0\1\1\1\0\6\1\1\0\4\1\1\0"+
    "\2\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0"+
    "\2\1\1\0\4\1\1\0\11\1\1\0\3\1\1\0"+
    "\1\1\3\0\4\1\1\0\4\1\1\0\6\1\3\0"+
    "\4\1\1\0\7\1\3\0\4\1\1\0\3\1\1\0"+
    "\3\1\1\0\2\1\1\0\4\1\1\0\3\1\1\0"+
    "\166\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[393];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public absScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new token("ERROR", yytext(), yyline);
            }
          // fall through
          case 10: break;
          case 2:
            { /* Ignore */
            }
          // fall through
          case 11: break;
          case 3:
            { return new token("OPERATOR", yytext(), yyline);
            }
          // fall through
          case 12: break;
          case 4:
            { return new token("NUMBER", yytext(), yyline);
            }
          // fall through
          case 13: break;
          case 5:
            { return new token("IDENTIFIER", yytext(), yyline);
            }
          // fall through
          case 14: break;
          case 6:
            { return new token("LITERAL", yytext(), yyline);
            }
          // fall through
          case 15: break;
          case 7:
            { return new token("KEYWORD", yytext(), yyline);
            }
          // fall through
          case 16: break;
          case 8:
            { /* Inline comment */
            }
          // fall through
          case 17: break;
          case 9:
            { /* Multiblock comment */
            }
          // fall through
          case 18: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
