package scanner;// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer.flex

// Main code
import obj.token;
// This object will contain the token name and line where is located


@SuppressWarnings("fallthrough")
public class absScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\0"+
    "\1\5\4\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\7\20\2\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\0\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\47\1\60\1\0"+
    "\1\61\1\62\1\47\1\0\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\47\1\63\1\0"+
    "\1\64\7\0\1\3\252\0\2\65\115\0\1\66\u0198\0"+
    "\1\67\1\70\2\0\1\71\1\72\12\0\2\3\u0100\0"+
    "\1\73\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\1\1\13\1\14\1\15"+
    "\1\16\1\17\25\20\1\21\1\22\1\23\5\1\1\0"+
    "\1\24\2\0\1\25\1\26\1\27\1\0\1\30\2\0"+
    "\1\31\1\32\1\33\5\20\1\0\5\20\1\34\1\0"+
    "\6\20\1\0\1\20\1\35\1\20\1\36\4\20\1\0"+
    "\1\20\1\37\1\40\7\20\1\41\3\20\1\0\2\20"+
    "\1\0\2\20\1\0\1\20\1\0\1\42\1\35\1\0"+
    "\1\36\6\0\1\30\1\0\2\30\2\20\1\0\1\43"+
    "\1\20\2\44\2\20\1\0\2\20\1\0\1\45\1\20"+
    "\1\45\1\20\1\0\1\46\2\20\1\47\1\20\1\0"+
    "\5\20\1\50\1\51\1\52\1\51\4\20\1\0\2\20"+
    "\1\53\1\54\1\55\5\20\1\0\1\20\1\0\1\56"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\1\57\3\0"+
    "\1\53\1\54\1\55\1\0\1\60\2\20\1\0\2\20"+
    "\1\0\2\61\1\20\1\0\1\20\1\0\1\20\2\62"+
    "\1\20\1\63\2\20\1\63\1\64\2\20\1\0\4\20"+
    "\1\0\2\20\1\0\3\20\1\0\1\65\1\66\1\67"+
    "\1\20\1\0\1\67\2\70\1\20\1\0\1\20\1\0"+
    "\2\71\2\0\2\20\1\0\1\72\2\73\2\74\1\20"+
    "\1\0\6\20\1\0\1\20\1\75\2\20\1\0\2\20"+
    "\1\0\3\20\1\0\2\76\1\20\1\0\2\77\2\0"+
    "\2\20\1\0\1\20\1\0\1\20\1\0\1\100\3\20"+
    "\1\0\1\20\2\101\2\20\1\102\2\103\2\20\1\0"+
    "\1\104\1\105\2\106\1\20\4\0\2\20\1\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\107\1\20\1\0\3\20"+
    "\1\110\1\20\1\110\2\111\3\0\1\20\2\112\1\20"+
    "\1\0\1\20\1\0\1\113\2\114\4\20\3\0\2\20"+
    "\1\0\1\20\1\0\1\20\1\115\1\116\1\117\1\0"+
    "\1\115\1\116\2\20\1\0\2\120\1\20\1\0\1\20"+
    "\2\121\1\20\1\0\2\20\1\0\2\20\1\0\1\20"+
    "\2\122\161\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[502];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\74\0\u0168"+
    "\0\u01a4\0\74\0\u01e0\0\74\0\74\0\u021c\0\u0258\0\74"+
    "\0\74\0\u0294\0\74\0\u02d0\0\u030c\0\u0348\0\u0384\0\u03c0"+
    "\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0"+
    "\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780"+
    "\0\u07bc\0\74\0\74\0\74\0\u07f8\0\u0834\0\u0870\0\u08ac"+
    "\0\u08e8\0\264\0\74\0\u0924\0\u0960\0\74\0\74\0\74"+
    "\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\74\0\74\0\74\0\u0a8c"+
    "\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c"+
    "\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c"+
    "\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0a8c\0\u0f78\0\u0fb4\0\u0ff0"+
    "\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u0a8c\0\u0a8c\0\u1158"+
    "\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u0a8c\0\u12fc"+
    "\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc"+
    "\0\u1518\0\u1554\0\u07f8\0\74\0\74\0\u1590\0\u15cc\0\u1608"+
    "\0\u1644\0\u1680\0\u16bc\0\u08e8\0\u16f8\0\u1734\0\u1770\0\u1770"+
    "\0\u0a50\0\u17ac\0\u17e8\0\u1824\0\u17ac\0\u1860\0\u17ac\0\74"+
    "\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u17ac\0\u1a04"+
    "\0\74\0\u1a40\0\u1a7c\0\u17ac\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c"+
    "\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u17ac\0\u17ac"+
    "\0\u17ac\0\74\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c"+
    "\0\u1e78\0\u17ac\0\u17ac\0\u17ac\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68"+
    "\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u17ac\0\u2094\0\u20d0\0\u210c"+
    "\0\u2148\0\u2184\0\u21c0\0\u17ac\0\u21fc\0\u2238\0\u2274\0\74"+
    "\0\74\0\74\0\u22b0\0\u0960\0\u22ec\0\u2328\0\u2364\0\u23a0"+
    "\0\u23dc\0\u2418\0\u22ec\0\74\0\u2454\0\u2490\0\u24cc\0\u2508"+
    "\0\u2544\0\u22ec\0\74\0\u2580\0\u22ec\0\u25bc\0\u25f8\0\74"+
    "\0\u22ec\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c"+
    "\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c"+
    "\0\u22ec\0\u22ec\0\u22ec\0\u29b8\0\u29f4\0\74\0\u22ec\0\74"+
    "\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u22ec\0\74\0\u2b20\0\u2b5c"+
    "\0\u2b98\0\u2bd4\0\u2c10\0\u2b98\0\u2b98\0\74\0\u2c4c\0\u2c88"+
    "\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68"+
    "\0\u2ea4\0\u2ee0\0\u2b98\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c"+
    "\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u2b98\0\74\0\u3174"+
    "\0\u31b0\0\u2b98\0\74\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc"+
    "\0\u3318\0\u3354\0\u3390\0\u33cc\0\u3264\0\u3408\0\u3444\0\u3480"+
    "\0\u34bc\0\u34f8\0\u3264\0\74\0\u3534\0\u3570\0\u3264\0\u3264"+
    "\0\74\0\u35ac\0\u35e8\0\u3624\0\u3264\0\u3264\0\u3264\0\74"+
    "\0\u3660\0\u369c\0\u36d8\0\u3714\0\u3750\0\u378c\0\u37c8\0\u3804"+
    "\0\u3840\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u378c\0\u396c\0\u39a8"+
    "\0\u39e4\0\u3a20\0\u3a5c\0\u378c\0\u3a98\0\74\0\u378c\0\74"+
    "\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88\0\u3b88\0\74\0\u3bc4\0\u3c00"+
    "\0\u3c3c\0\u3c78\0\u3b88\0\u3b88\0\74\0\u3cb4\0\u3cf0\0\u3d2c"+
    "\0\u3d68\0\u3da4\0\u3de0\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0\0\u3f0c"+
    "\0\u3f48\0\u3f84\0\u3e58\0\u3e58\0\u3e58\0\u3fc0\0\74\0\74"+
    "\0\u3ffc\0\u4038\0\u4074\0\u3ffc\0\74\0\u40b0\0\u40ec\0\u4128"+
    "\0\u4128\0\74\0\u4164\0\u41a0\0\u41dc\0\u4218\0\u4254\0\u4290"+
    "\0\u42cc\0\u4308\0\u4344\0\u4344\0\74\0\u4380\0\u43bc\0\u43f8"+
    "\0\u4434\0\u4470\0\u44ac\0\u44e8\0\u4524\0\u4560\0\u459c\0\u45d8"+
    "\0\u4614\0\u4650\0\u468c\0\u46c8\0\u4704\0\u4740\0\u477c\0\u47b8"+
    "\0\u47f4\0\u4830\0\u486c\0\u48a8\0\u48e4\0\u4920\0\u495c\0\u4998"+
    "\0\u49d4\0\u4a10\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00\0\u4b3c\0\u4b78"+
    "\0\u4bb4\0\u4bf0\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c\0\u4d58"+
    "\0\u4d94\0\u4dd0\0\u4e0c\0\u4e48\0\u4e84\0\u4ec0\0\u4efc\0\u4f38"+
    "\0\u4f74\0\u4fb0\0\u4fec\0\u5028\0\u5064\0\u50a0\0\u50dc\0\u5118"+
    "\0\u5154\0\u5190\0\u51cc\0\u5208\0\u5244\0\u5280\0\u52bc\0\u52f8"+
    "\0\u5334\0\u5370\0\u53ac\0\u53e8\0\u5424\0\u5460\0\u549c\0\u54d8"+
    "\0\u5514\0\u5550\0\u558c\0\u55c8\0\u5604\0\u5640\0\u567c\0\u56b8"+
    "\0\u56f4\0\u5730\0\u576c\0\u57a8\0\u57e4\0\u5820\0\u585c\0\u5898"+
    "\0\u58d4\0\u5910\0\u594c\0\u5988\0\u59c4\0\u5a00\0\u5a3c\0\u5a78"+
    "\0\u5ab4\0\u5af0\0\u5b2c\0\u5b68\0\u5ba4\0\u5be0\0\u5c1c\0\u5c58"+
    "\0\u5c94\0\u5cd0\0\u5d0c\0\u5d48\0\u5d84\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[502];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\2\34\1\36"+
    "\1\37\1\40\1\41\1\42\1\34\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\34\1\52\1\53\1\54"+
    "\1\55\1\2\1\56\1\57\1\60\1\2\1\61\2\2"+
    "\75\0\2\3\1\0\1\3\73\0\1\62\1\63\11\0"+
    "\3\62\5\0\31\62\20\0\1\64\12\0\3\64\5\0"+
    "\31\64\25\0\1\65\73\0\1\66\74\0\1\67\75\0"+
    "\1\70\74\0\1\71\1\0\2\72\1\17\11\0\1\73"+
    "\22\0\1\74\32\0\1\71\1\0\3\17\11\0\1\73"+
    "\65\0\1\75\1\76\72\0\1\77\65\0\3\100\5\0"+
    "\1\100\1\101\13\100\1\102\3\100\1\103\1\104\6\100"+
    "\6\0\1\105\24\0\3\100\5\0\4\100\1\106\24\100"+
    "\33\0\3\100\5\0\1\107\15\100\1\110\12\100\33\0"+
    "\3\100\5\0\4\100\1\111\3\100\1\112\5\100\1\113"+
    "\12\100\5\0\1\114\25\0\3\100\5\0\13\100\1\115"+
    "\1\100\1\116\11\100\1\117\1\100\33\0\3\100\5\0"+
    "\10\100\1\120\5\100\1\121\5\100\1\122\4\100\5\0"+
    "\1\123\25\0\3\100\5\0\16\100\1\124\12\100\33\0"+
    "\3\100\5\0\31\100\33\0\3\100\5\0\5\100\1\125"+
    "\6\100\1\126\1\127\13\100\33\0\3\100\5\0\1\130"+
    "\30\100\33\0\3\100\5\0\16\100\1\131\12\100\33\0"+
    "\3\100\5\0\10\100\1\132\5\100\1\133\12\100\5\0"+
    "\1\134\25\0\3\100\5\0\1\100\1\135\3\100\1\136"+
    "\13\100\1\137\7\100\33\0\3\100\5\0\1\140\20\100"+
    "\1\141\7\100\33\0\3\100\5\0\4\100\1\142\24\100"+
    "\33\0\3\100\5\0\4\100\1\143\2\100\1\144\13\100"+
    "\1\145\5\100\33\0\3\100\5\0\7\100\1\146\6\100"+
    "\1\147\11\100\1\150\33\0\3\100\5\0\15\100\1\151"+
    "\4\100\1\152\6\100\6\0\1\153\24\0\3\100\5\0"+
    "\1\154\7\100\1\155\20\100\5\0\1\156\25\0\3\100"+
    "\5\0\7\100\1\157\1\160\20\100\5\0\1\161\25\0"+
    "\3\100\5\0\16\100\1\162\12\100\14\0\64\163\1\164"+
    "\7\163\34\0\1\165\6\0\1\166\1\167\62\0\1\170"+
    "\2\0\1\171\13\0\1\172\25\0\1\173\12\0\3\173"+
    "\5\0\31\173\20\0\1\174\12\0\3\174\5\0\31\174"+
    "\12\0\1\63\7\0\1\63\65\0\2\65\2\0\5\65"+
    "\1\175\62\65\17\0\3\176\67\0\1\71\1\0\2\72"+
    "\1\17\11\0\1\73\52\0\1\177\1\0\1\177\2\0"+
    "\3\200\71\0\3\201\5\0\6\201\56\0\3\202\5\0"+
    "\31\202\33\0\3\202\5\0\22\202\1\203\6\202\6\0"+
    "\1\204\24\0\3\202\5\0\3\202\1\205\25\202\33\0"+
    "\3\202\5\0\21\202\1\206\7\202\33\0\3\202\5\0"+
    "\14\202\1\207\14\202\57\0\1\210\47\0\3\202\5\0"+
    "\6\202\1\211\22\202\33\0\3\202\5\0\22\202\1\212"+
    "\6\202\6\0\1\213\24\0\3\202\5\0\15\202\1\214"+
    "\13\202\33\0\3\202\5\0\22\202\1\215\6\202\6\0"+
    "\1\216\24\0\3\202\5\0\25\202\1\217\3\202\33\0"+
    "\3\202\5\0\26\202\1\220\2\202\70\0\1\221\36\0"+
    "\3\202\5\0\22\202\1\222\6\202\6\0\1\223\24\0"+
    "\3\202\5\0\3\202\1\224\25\202\33\0\3\202\5\0"+
    "\23\202\1\225\5\202\33\0\3\202\5\0\13\202\1\226"+
    "\15\202\33\0\3\202\5\0\21\202\1\227\7\202\33\0"+
    "\3\202\5\0\15\202\1\230\13\202\56\0\1\231\50\0"+
    "\3\202\5\0\23\202\1\232\5\202\33\0\3\202\5\0"+
    "\17\202\1\233\11\202\33\0\3\202\5\0\13\202\1\234"+
    "\7\202\1\235\5\202\33\0\3\202\5\0\1\202\1\236"+
    "\27\202\33\0\3\202\5\0\3\202\1\237\25\202\33\0"+
    "\3\202\5\0\13\202\1\240\15\202\33\0\3\202\5\0"+
    "\23\202\1\241\5\202\56\0\1\242\50\0\3\202\5\0"+
    "\11\202\1\243\17\202\33\0\3\202\5\0\2\202\1\244"+
    "\26\202\33\0\3\202\5\0\10\202\1\245\5\202\1\246"+
    "\12\202\5\0\1\247\25\0\3\202\5\0\2\202\1\250"+
    "\14\202\1\251\11\202\33\0\3\202\5\0\23\202\1\252"+
    "\5\202\33\0\3\202\5\0\13\202\1\253\5\202\1\254"+
    "\7\202\33\0\3\202\5\0\21\202\1\255\7\202\33\0"+
    "\3\202\5\0\4\202\1\256\24\202\33\0\3\202\5\0"+
    "\17\202\1\257\11\202\33\0\3\202\5\0\10\202\1\260"+
    "\12\202\1\261\5\202\5\0\1\262\25\0\3\202\5\0"+
    "\4\202\1\263\24\202\47\0\1\264\57\0\3\202\5\0"+
    "\21\202\1\265\7\202\33\0\3\202\5\0\21\202\1\266"+
    "\7\202\64\0\1\267\42\0\3\202\5\0\10\202\1\270"+
    "\20\202\5\0\1\271\25\0\3\202\5\0\23\202\1\272"+
    "\5\202\66\0\1\273\40\0\3\202\5\0\21\202\1\274"+
    "\7\202\62\0\1\275\67\0\1\276\7\0\1\277\73\0"+
    "\1\300\63\0\1\301\5\0\1\302\73\0\1\303\113\0"+
    "\1\63\3\0\2\65\2\0\4\65\1\304\1\175\62\65"+
    "\17\0\3\176\11\0\1\73\57\0\3\200\71\0\3\305"+
    "\5\0\31\305\33\0\3\305\5\0\16\305\1\306\12\305"+
    "\61\0\1\307\45\0\3\305\5\0\1\310\30\305\33\0"+
    "\3\305\5\0\10\305\1\311\20\305\5\0\1\312\25\0"+
    "\3\305\5\0\4\305\1\313\24\305\47\0\1\314\57\0"+
    "\3\305\5\0\22\305\1\315\6\305\6\0\1\316\24\0"+
    "\3\305\5\0\23\305\1\317\5\305\66\0\1\320\40\0"+
    "\3\305\5\0\15\305\1\321\13\305\33\0\3\305\5\0"+
    "\4\305\1\322\24\305\47\0\1\323\57\0\3\305\5\0"+
    "\4\305\1\324\24\305\33\0\3\305\5\0\4\305\1\325"+
    "\24\305\33\0\3\305\5\0\26\305\1\326\2\305\33\0"+
    "\3\305\5\0\2\305\1\327\26\305\47\0\1\330\57\0"+
    "\3\305\5\0\16\305\1\331\12\305\33\0\3\305\5\0"+
    "\13\305\1\332\15\305\33\0\3\305\5\0\10\305\1\333"+
    "\20\305\5\0\1\334\25\0\3\305\5\0\4\305\1\335"+
    "\24\305\33\0\3\305\5\0\4\305\1\336\24\305\33\0"+
    "\3\305\5\0\4\305\1\337\24\305\33\0\3\305\5\0"+
    "\12\305\1\340\16\305\13\0\1\341\17\0\3\305\5\0"+
    "\25\305\1\342\3\305\33\0\3\305\5\0\2\305\1\343"+
    "\26\305\70\0\1\344\36\0\3\305\5\0\16\305\1\345"+
    "\12\305\33\0\3\305\5\0\4\305\1\346\24\305\33\0"+
    "\3\305\5\0\10\305\1\347\20\305\5\0\1\350\25\0"+
    "\3\305\5\0\15\305\1\351\13\305\33\0\3\305\5\0"+
    "\4\305\1\352\24\305\33\0\3\305\5\0\23\305\1\353"+
    "\5\305\33\0\3\305\5\0\10\305\1\354\20\305\5\0"+
    "\1\355\60\0\1\356\40\0\3\305\5\0\22\305\1\357"+
    "\6\305\6\0\1\360\56\0\1\360\14\0\1\360\24\0"+
    "\3\305\5\0\23\305\1\361\5\305\66\0\1\362\40\0"+
    "\3\305\5\0\13\305\1\363\15\305\56\0\1\364\50\0"+
    "\3\305\5\0\7\305\1\365\21\305\52\0\1\366\77\0"+
    "\1\367\70\0\1\334\25\0\1\334\41\0\1\370\77\0"+
    "\1\350\25\0\1\350\25\0\3\371\5\0\31\371\33\0"+
    "\3\371\5\0\13\371\1\372\15\371\56\0\1\373\50\0"+
    "\3\371\5\0\30\371\1\374\33\0\3\371\5\0\15\371"+
    "\1\375\13\371\60\0\1\376\46\0\3\371\5\0\23\371"+
    "\1\377\5\371\66\0\1\u0100\40\0\3\371\5\0\21\371"+
    "\1\u0101\7\371\64\0\1\u0102\42\0\3\371\5\0\23\371"+
    "\1\u0103\5\371\33\0\3\371\5\0\21\371\1\u0104\7\371"+
    "\33\0\3\371\5\0\1\u0105\30\371\33\0\3\371\5\0"+
    "\23\371\1\u0106\5\371\33\0\3\371\5\0\4\371\1\u0107"+
    "\24\371\33\0\3\371\5\0\15\371\1\u0108\13\371\60\0"+
    "\1\u0109\46\0\3\371\5\0\21\371\1\u010a\7\371\33\0"+
    "\3\371\5\0\13\371\1\u010b\15\371\33\0\3\371\5\0"+
    "\2\371\1\u010c\26\371\33\0\3\371\5\0\4\371\1\u010d"+
    "\24\371\47\0\1\u010e\57\0\3\371\5\0\1\u010f\30\371"+
    "\33\0\3\371\5\0\4\371\1\u0110\24\371\43\0\1\u0111"+
    "\63\0\3\371\5\0\21\371\1\u0112\7\371\33\0\3\371"+
    "\5\0\1\u0113\30\371\33\0\3\371\5\0\15\371\1\u0114"+
    "\13\371\60\0\1\u0115\46\0\3\371\5\0\13\371\1\u0116"+
    "\15\371\56\0\1\u0117\50\0\3\371\5\0\24\371\1\u0118"+
    "\4\371\67\0\1\u0119\37\0\3\371\5\0\4\371\1\u011a"+
    "\24\371\47\0\1\u011b\73\0\1\u011c\110\0\1\u011d\42\0"+
    "\3\u011e\5\0\31\u011e\33\0\3\u011e\5\0\24\u011e\1\u011f"+
    "\4\u011e\67\0\1\u0120\37\0\3\u011e\5\0\21\u011e\1\u0121"+
    "\7\u011e\64\0\1\u0122\42\0\3\u011e\5\0\24\u011e\1\u0123"+
    "\4\u011e\67\0\1\u0124\37\0\3\u011e\5\0\16\u011e\1\u0125"+
    "\12\u011e\33\0\3\u011e\5\0\15\u011e\1\u0126\13\u011e\33\0"+
    "\3\u011e\5\0\21\u011e\1\u0127\7\u011e\33\0\3\u011e\5\0"+
    "\10\u011e\1\u0128\20\u011e\5\0\1\u0129\25\0\3\u011e\5\0"+
    "\14\u011e\1\u012a\14\u011e\33\0\3\u011e\5\0\4\u011e\1\u012b"+
    "\24\u011e\47\0\1\u012c\57\0\3\u011e\5\0\5\u011e\1\u012d"+
    "\13\u011e\1\u012e\7\u011e\33\0\3\u011e\5\0\23\u011e\1\u012f"+
    "\5\u011e\33\0\3\u011e\5\0\3\u011e\1\u0130\25\u011e\46\0"+
    "\1\u0131\60\0\3\u011e\5\0\23\u011e\1\u0132\5\u011e\33\0"+
    "\3\u011e\5\0\3\u011e\1\u0133\25\u011e\66\0\1\u0134\40\0"+
    "\3\u011e\5\0\3\u011e\1\u0135\25\u011e\33\0\3\u011e\5\0"+
    "\23\u011e\1\u0136\5\u011e\33\0\3\u011e\5\0\6\u011e\1\u0137"+
    "\22\u011e\51\0\1\u0138\55\0\3\u011e\5\0\1\u0139\30\u011e"+
    "\43\0\1\u013a\107\0\1\u013b\64\0\1\u013c\13\0\1\u013d"+
    "\42\0\3\u013e\5\0\31\u013e\33\0\3\u013e\5\0\23\u013e"+
    "\1\u013f\5\u013e\66\0\1\u0140\40\0\3\u013e\5\0\24\u013e"+
    "\1\u0141\4\u013e\67\0\1\u0142\37\0\3\u013e\5\0\2\u013e"+
    "\1\u0143\26\u013e\45\0\1\u0144\61\0\3\u013e\5\0\1\u0145"+
    "\30\u013e\33\0\3\u013e\5\0\3\u013e\1\u0146\25\u013e\33\0"+
    "\3\u013e\5\0\16\u013e\1\u0147\12\u013e\61\0\1\u0148\45\0"+
    "\3\u013e\5\0\4\u013e\1\u0149\24\u013e\33\0\3\u013e\5\0"+
    "\1\u014a\30\u013e\33\0\3\u013e\5\0\24\u013e\1\u014b\4\u013e"+
    "\33\0\3\u013e\5\0\4\u013e\1\u014c\24\u013e\33\0\3\u013e"+
    "\5\0\24\u013e\1\u014d\4\u013e\47\0\1\u014e\57\0\3\u013e"+
    "\5\0\13\u013e\1\u014f\15\u013e\56\0\1\u0150\64\0\1\u0151"+
    "\67\0\1\u0152\117\0\1\u0153\37\0\3\u0154\5\0\31\u0154"+
    "\33\0\3\u0154\5\0\4\u0154\1\u0155\24\u0154\47\0\1\u0156"+
    "\57\0\3\u0154\5\0\2\u0154\1\u0157\26\u0154\45\0\1\u0158"+
    "\61\0\3\u0154\5\0\23\u0154\1\u0159\5\u0154\66\0\1\u015a"+
    "\40\0\3\u0154\5\0\13\u0154\1\u015b\15\u0154\33\0\3\u0154"+
    "\5\0\15\u0154\1\u015c\13\u0154\60\0\1\u015d\46\0\3\u0154"+
    "\5\0\15\u0154\1\u015e\13\u0154\33\0\3\u0154\5\0\2\u0154"+
    "\1\u015f\26\u0154\33\0\3\u0154\5\0\17\u0154\1\u0160\11\u0154"+
    "\33\0\3\u0154\5\0\21\u0154\1\u0161\7\u0154\60\0\1\u0162"+
    "\60\0\1\u0163\110\0\1\u0164\44\0\3\u0165\5\0\31\u0165"+
    "\33\0\3\u0165\5\0\23\u0165\1\u0166\5\u0165\66\0\1\u0167"+
    "\40\0\3\u0165\5\0\16\u0165\1\u0168\12\u0165\61\0\1\u0169"+
    "\45\0\3\u0165\5\0\23\u0165\1\u016a\5\u0165\33\0\3\u0165"+
    "\5\0\4\u0165\1\u016b\24\u0165\33\0\3\u0165\5\0\23\u0165"+
    "\1\u016c\5\u0165\33\0\3\u0165\5\0\4\u0165\1\u016d\24\u0165"+
    "\66\0\1\u016e\54\0\1\u016f\112\0\1\u0170\40\0\3\u0171"+
    "\5\0\31\u0171\33\0\3\u0171\5\0\16\u0171\1\u0172\12\u0171"+
    "\61\0\1\u0173\45\0\3\u0171\5\0\21\u0171\1\u0174\7\u0171"+
    "\64\0\1\u0175\42\0\3\u0171\5\0\1\u0176\30\u0171\43\0"+
    "\1\u0177\63\0\3\u0178\5\0\31\u0178\33\0\3\u0178\5\0"+
    "\21\u0178\1\u0179\7\u0178\64\0\1\u017a\42\0\3\u0178\5\0"+
    "\23\u0178\1\u017b\5\u0178\66\0\1\u017c\40\0\3\u017d\5\0"+
    "\31\u017d\33\0\3\u017d\5\0\10\u017d\1\u017e\20\u017d\5\0"+
    "\1\u017f\45\0\1\u017f\25\0\1\u017f\25\0\3\u0180\5\0"+
    "\31\u0180\33\0\3\u0180\5\0\16\u0180\1\u0181\12\u0180\61\0"+
    "\1\u0182\45\0\3\u0183\5\0\31\u0183\33\0\3\u0183\5\0"+
    "\15\u0183\1\u0184\13\u0183\60\0\1\u0185\46\0\3\u0186\5\0"+
    "\31\u0186\33\0\3\u0187\5\0\31\u0187\33\0\3\u0188\5\0"+
    "\31\u0188\33\0\3\u0189\5\0\31\u0189\33\0\3\u018a\5\0"+
    "\31\u018a\33\0\3\u018b\5\0\31\u018b\33\0\3\u018c\5\0"+
    "\31\u018c\33\0\3\u018d\5\0\31\u018d\33\0\3\u018e\5\0"+
    "\31\u018e\33\0\3\u018f\5\0\31\u018f\33\0\3\u0190\5\0"+
    "\31\u0190\33\0\3\u0191\5\0\31\u0191\33\0\3\u0192\5\0"+
    "\31\u0192\33\0\3\u0193\5\0\31\u0193\33\0\3\u0194\5\0"+
    "\31\u0194\33\0\3\u0195\5\0\31\u0195\33\0\3\u0196\5\0"+
    "\31\u0196\33\0\3\u0197\5\0\31\u0197\33\0\3\u0198\5\0"+
    "\31\u0198\33\0\3\u0199\5\0\31\u0199\33\0\3\u019a\5\0"+
    "\31\u019a\33\0\3\u019b\5\0\31\u019b\33\0\3\u019c\5\0"+
    "\31\u019c\33\0\3\u019d\5\0\31\u019d\33\0\3\u019e\5\0"+
    "\31\u019e\33\0\3\u019f\5\0\31\u019f\33\0\3\u01a0\5\0"+
    "\31\u01a0\33\0\3\u01a1\5\0\31\u01a1\33\0\3\u01a2\5\0"+
    "\31\u01a2\33\0\3\u01a3\5\0\31\u01a3\33\0\3\u01a4\5\0"+
    "\31\u01a4\33\0\3\u01a5\5\0\31\u01a5\33\0\3\u01a6\5\0"+
    "\31\u01a6\33\0\3\u01a7\5\0\31\u01a7\33\0\3\u01a8\5\0"+
    "\31\u01a8\33\0\3\u01a9\5\0\31\u01a9\33\0\3\u01aa\5\0"+
    "\31\u01aa\33\0\3\u01ab\5\0\31\u01ab\33\0\3\u01ac\5\0"+
    "\31\u01ac\33\0\3\u01ad\5\0\31\u01ad\33\0\3\u01ae\5\0"+
    "\31\u01ae\33\0\3\u01af\5\0\31\u01af\33\0\3\u01b0\5\0"+
    "\31\u01b0\33\0\3\u01b1\5\0\31\u01b1\33\0\3\u01b2\5\0"+
    "\31\u01b2\33\0\3\u01b3\5\0\31\u01b3\33\0\3\u01b4\5\0"+
    "\31\u01b4\33\0\3\u01b5\5\0\31\u01b5\33\0\3\u01b6\5\0"+
    "\31\u01b6\33\0\3\u01b7\5\0\31\u01b7\33\0\3\u01b8\5\0"+
    "\31\u01b8\33\0\3\u01b9\5\0\31\u01b9\33\0\3\u01ba\5\0"+
    "\31\u01ba\33\0\3\u01bb\5\0\31\u01bb\33\0\3\u01bc\5\0"+
    "\31\u01bc\33\0\3\u01bd\5\0\31\u01bd\33\0\3\u01be\5\0"+
    "\31\u01be\33\0\3\u01bf\5\0\31\u01bf\33\0\3\u01c0\5\0"+
    "\31\u01c0\33\0\3\u01c1\5\0\31\u01c1\33\0\3\u01c2\5\0"+
    "\31\u01c2\33\0\3\u01c3\5\0\31\u01c3\33\0\3\u01c4\5\0"+
    "\31\u01c4\33\0\3\u01c5\5\0\31\u01c5\33\0\3\u01c6\5\0"+
    "\31\u01c6\33\0\3\u01c7\5\0\31\u01c7\33\0\3\u01c8\5\0"+
    "\31\u01c8\33\0\3\u01c9\5\0\31\u01c9\33\0\3\u01ca\5\0"+
    "\31\u01ca\33\0\3\u01cb\5\0\31\u01cb\33\0\3\u01cc\5\0"+
    "\31\u01cc\33\0\3\u01cd\5\0\31\u01cd\33\0\3\u01ce\5\0"+
    "\31\u01ce\33\0\3\u01cf\5\0\31\u01cf\33\0\3\u01d0\5\0"+
    "\31\u01d0\33\0\3\u01d1\5\0\31\u01d1\33\0\3\u01d2\5\0"+
    "\31\u01d2\33\0\3\u01d3\5\0\31\u01d3\33\0\3\u01d4\5\0"+
    "\31\u01d4\33\0\3\u01d5\5\0\31\u01d5\33\0\3\u01d6\5\0"+
    "\31\u01d6\33\0\3\u01d7\5\0\31\u01d7\33\0\3\u01d8\5\0"+
    "\31\u01d8\33\0\3\u01d9\5\0\31\u01d9\33\0\3\u01da\5\0"+
    "\31\u01da\33\0\3\u01db\5\0\31\u01db\33\0\3\u01dc\5\0"+
    "\31\u01dc\33\0\3\u01dd\5\0\31\u01dd\33\0\3\u01de\5\0"+
    "\31\u01de\33\0\3\u01df\5\0\31\u01df\33\0\3\u01e0\5\0"+
    "\31\u01e0\33\0\3\u01e1\5\0\31\u01e1\33\0\3\u01e2\5\0"+
    "\31\u01e2\33\0\3\u01e3\5\0\31\u01e3\33\0\3\u01e4\5\0"+
    "\31\u01e4\33\0\3\u01e5\5\0\31\u01e5\33\0\3\u01e6\5\0"+
    "\31\u01e6\33\0\3\u01e7\5\0\31\u01e7\33\0\3\u01e8\5\0"+
    "\31\u01e8\33\0\3\u01e9\5\0\31\u01e9\33\0\3\u01ea\5\0"+
    "\31\u01ea\33\0\3\u01eb\5\0\31\u01eb\33\0\3\u01ec\5\0"+
    "\31\u01ec\33\0\3\u01ed\5\0\31\u01ed\33\0\3\u01ee\5\0"+
    "\31\u01ee\33\0\3\u01ef\5\0\31\u01ef\33\0\3\u01f0\5\0"+
    "\31\u01f0\33\0\3\u01f1\5\0\31\u01f1\33\0\3\u01f2\5\0"+
    "\31\u01f2\33\0\3\u01f3\5\0\31\u01f3\33\0\3\u01f4\5\0"+
    "\31\u01f4\33\0\3\u01f5\5\0\31\u01f5\33\0\3\u01f6\5\0"+
    "\31\u01f6\14\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[24000];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\2\1\1\11\1\1\2\11"+
    "\2\1\2\11\1\1\1\11\26\1\3\11\5\1\1\0"+
    "\1\11\2\0\3\11\1\0\1\1\2\0\3\11\5\1"+
    "\1\0\6\1\1\0\6\1\1\0\10\1\1\0\16\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\1\1\0\2\11"+
    "\1\0\1\1\6\0\1\1\1\0\4\1\1\0\3\1"+
    "\1\11\2\1\1\0\2\1\1\0\2\1\1\11\1\1"+
    "\1\0\5\1\1\0\10\1\1\11\4\1\1\0\12\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\3\0\3\11\1\0\3\1\1\0\2\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\0\2\1"+
    "\1\11\4\1\1\11\3\1\1\0\4\1\1\0\2\1"+
    "\1\0\3\1\1\0\4\1\1\0\1\11\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\2\0\2\1"+
    "\1\0\2\1\1\11\3\1\1\0\6\1\1\0\4\1"+
    "\1\0\2\1\1\0\3\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\11\2\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\4\1\1\0\2\1\1\11\4\1\1\11"+
    "\2\1\1\0\3\1\1\11\1\1\4\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\3\1\1\0\5\1\1\11"+
    "\1\1\1\11\3\0\2\1\1\11\1\1\1\0\1\1"+
    "\1\0\2\1\1\11\4\1\3\0\2\1\1\0\1\1"+
    "\1\0\4\1\1\0\2\11\2\1\1\0\1\1\1\11"+
    "\1\1\1\0\2\1\1\11\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\11\160\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[502];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public absScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new token("ERROR", yytext(), yyline);
            }
          // fall through
          case 83: break;
          case 2:
            { /* Ignore */
            }
          // fall through
          case 84: break;
          case 3:
            { return new token("OP_OPENPARENTHESIS", yytext(), yyline);
            }
          // fall through
          case 85: break;
          case 4:
            { return new token("OR_CLOSEPARENTHESIS", yytext(), yyline);
            }
          // fall through
          case 86: break;
          case 5:
            { return new token("OP_MULT", yytext(), yyline);
            }
          // fall through
          case 87: break;
          case 6:
            { return new token("OP_SUM", yytext(), yyline);
            }
          // fall through
          case 88: break;
          case 7:
            { return new token("OP_COMMA", yytext(), yyline);
            }
          // fall through
          case 89: break;
          case 8:
            { return new token("OP_MINUS", yytext(), yyline);
            }
          // fall through
          case 90: break;
          case 9:
            { return new token("OP_PERIOD", yytext(), yyline);
            }
          // fall through
          case 91: break;
          case 10:
            { return new token("OP_SLASH", yytext(), yyline);
            }
          // fall through
          case 92: break;
          case 11:
            { return new token("OP_COLON", yytext(), yyline);
            }
          // fall through
          case 93: break;
          case 12:
            { return new token("OP_SEMICOLON", yytext(), yyline);
            }
          // fall through
          case 94: break;
          case 13:
            { return new token("OP_LESS", yytext(), yyline);
            }
          // fall through
          case 95: break;
          case 14:
            { return new token("OP_EQUALS", yytext(), yyline);
            }
          // fall through
          case 96: break;
          case 15:
            { return new token("OP_GREATER", yytext(), yyline);
            }
          // fall through
          case 97: break;
          case 16:
            { return new token("IDENTIFIER", yytext(), yyline);
            }
          // fall through
          case 98: break;
          case 17:
            { return new token("OP_OPENBRACKET", yytext(), yyline);
            }
          // fall through
          case 99: break;
          case 18:
            { return new token("OP_CLOSEBRACKET", yytext(), yyline);
            }
          // fall through
          case 100: break;
          case 19:
            { return new token("OP_POWER", yytext(), yyline);
            }
          // fall through
          case 101: break;
          case 20:
            { return new token("LITERAL", yytext(), yyline);
            }
          // fall through
          case 102: break;
          case 21:
            { return new token("OP_DOUBLEASTERISK", yytext(), yyline);
            }
          // fall through
          case 103: break;
          case 22:
            { return new token("OP_INCREASE", yytext(), yyline);
            }
          // fall through
          case 104: break;
          case 23:
            { return new token("OP_DECREASE", yytext(), yyline);
            }
          // fall through
          case 105: break;
          case 24:
            { return new token("NUMBER", yytext(), yyline);
            }
          // fall through
          case 106: break;
          case 25:
            { return new token("OP_LESSEQUAL", yytext(), yyline);
            }
          // fall through
          case 107: break;
          case 26:
            { return new token("OP_TYPE", yytext(), yyline);
            }
          // fall through
          case 108: break;
          case 27:
            { return new token("OP_GREATEREQUAL", yytext(), yyline);
            }
          // fall through
          case 109: break;
          case 28:
            { return new token("DO", yytext(), yyline);
            }
          // fall through
          case 110: break;
          case 29:
            { return new token("IF", yytext(), yyline);
            }
          // fall through
          case 111: break;
          case 30:
            { return new token("IN", yytext(), yyline);
            }
          // fall through
          case 112: break;
          case 31:
            { return new token("OF", yytext(), yyline);
            }
          // fall through
          case 113: break;
          case 32:
            { return new token("OR", yytext(), yyline);
            }
          // fall through
          case 114: break;
          case 33:
            { return new token("TO", yytext(), yyline);
            }
          // fall through
          case 115: break;
          case 34:
            { /* Inline comment */
            }
          // fall through
          case 116: break;
          case 35:
            { return new token("AND", yytext(), yyline);
            }
          // fall through
          case 117: break;
          case 36:
            { return new token("ASM", yytext(), yyline);
            }
          // fall through
          case 118: break;
          case 37:
            { return new token("DIV", yytext(), yyline);
            }
          // fall through
          case 119: break;
          case 38:
            { return new token("END", yytext(), yyline);
            }
          // fall through
          case 120: break;
          case 39:
            { return new token("FOR", yytext(), yyline);
            }
          // fall through
          case 121: break;
          case 40:
            { return new token("MOD", yytext(), yyline);
            }
          // fall through
          case 122: break;
          case 41:
            { return new token("NIL", yytext(), yyline);
            }
          // fall through
          case 123: break;
          case 42:
            { return new token("NOT", yytext(), yyline);
            }
          // fall through
          case 124: break;
          case 43:
            { return new token("SET", yytext(), yyline);
            }
          // fall through
          case 125: break;
          case 44:
            { return new token("SHL", yytext(), yyline);
            }
          // fall through
          case 126: break;
          case 45:
            { return new token("SHR", yytext(), yyline);
            }
          // fall through
          case 127: break;
          case 46:
            { return new token("VAR", yytext(), yyline);
            }
          // fall through
          case 128: break;
          case 47:
            { return new token("XOR", yytext(), yyline);
            }
          // fall through
          case 129: break;
          case 48:
            { /* Multiblock comment */
            }
          // fall through
          case 130: break;
          case 49:
            { return new token("CASE", yytext(), yyline);
            }
          // fall through
          case 131: break;
          case 50:
            { return new token("ELSE", yytext(), yyline);
            }
          // fall through
          case 132: break;
          case 51:
            { return new token("FILE", yytext(), yyline);
            }
          // fall through
          case 133: break;
          case 52:
            { return new token("GOTO", yytext(), yyline);
            }
          // fall through
          case 134: break;
          case 53:
            { return new token("THEN", yytext(), yyline);
            }
          // fall through
          case 135: break;
          case 54:
            { return new token("TYPE", yytext(), yyline);
            }
          // fall through
          case 136: break;
          case 55:
            { return new token("UNIT", yytext(), yyline);
            }
          // fall through
          case 137: break;
          case 56:
            { return new token("USES", yytext(), yyline);
            }
          // fall through
          case 138: break;
          case 57:
            { return new token("WITH", yytext(), yyline);
            }
          // fall through
          case 139: break;
          case 58:
            { return new token("ARRAY", yytext(), yyline);
            }
          // fall through
          case 140: break;
          case 59:
            { return new token("BEGIN", yytext(), yyline);
            }
          // fall through
          case 141: break;
          case 60:
            { return new token("CONST", yytext(), yyline);
            }
          // fall through
          case 142: break;
          case 61:
            { return new token("LABEL", yytext(), yyline);
            }
          // fall through
          case 143: break;
          case 62:
            { return new token("UNTIL", yytext(), yyline);
            }
          // fall through
          case 144: break;
          case 63:
            { return new token("WHILE", yytext(), yyline);
            }
          // fall through
          case 145: break;
          case 64:
            { return new token("DOWNTO", yytext(), yyline);
            }
          // fall through
          case 146: break;
          case 65:
            { return new token("INLINE", yytext(), yyline);
            }
          // fall through
          case 147: break;
          case 66:
            { return new token("OBJECT", yytext(), yyline);
            }
          // fall through
          case 148: break;
          case 67:
            { return new token("PACKED", yytext(), yyline);
            }
          // fall through
          case 149: break;
          case 68:
            { return new token("RECORD", yytext(), yyline);
            }
          // fall through
          case 150: break;
          case 69:
            { return new token("REPEAT", yytext(), yyline);
            }
          // fall through
          case 151: break;
          case 70:
            { return new token("STRING", yytext(), yyline);
            }
          // fall through
          case 152: break;
          case 71:
            { return new token("FORWARD", yytext(), yyline);
            }
          // fall through
          case 153: break;
          case 72:
            { return new token("PRIVATE", yytext(), yyline);
            }
          // fall through
          case 154: break;
          case 73:
            { return new token("VIRTUAL", yytext(), yyline);
            }
          // fall through
          case 155: break;
          case 74:
            { return new token("ABSOLUTE", yytext(), yyline);
            }
          // fall through
          case 156: break;
          case 75:
            { return new token("EXTERNAL", yytext(), yyline);
            }
          // fall through
          case 157: break;
          case 76:
            { return new token("FUNCTION", yytext(), yyline);
            }
          // fall through
          case 158: break;
          case 77:
            { return new token("INTERFACE", yytext(), yyline);
            }
          // fall through
          case 159: break;
          case 78:
            { return new token("INTERRUPT", yytext(), yyline);
            }
          // fall through
          case 160: break;
          case 79:
            { return new token("PROCEDURE", yytext(), yyline);
            }
          // fall through
          case 161: break;
          case 80:
            { return new token("DESTRUCTOR", yytext(), yyline);
            }
          // fall through
          case 162: break;
          case 81:
            { return new token("CONSTRUCTOR", yytext(), yyline);
            }
          // fall through
          case 163: break;
          case 82:
            { return new token("IMPLEMENTATION", yytext(), yyline);
            }
          // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
