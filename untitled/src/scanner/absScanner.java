// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer.flex

// Main code
package scanner; 
import obj.token;
// This object will contain the token name and line where is located


@SuppressWarnings("fallthrough")
public class absScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\0"+
    "\1\5\4\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\11\20\1\21\1\22\1\23"+
    "\1\24\1\25\2\0\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\46\1\57\1\0\1\60"+
    "\1\61\1\46\1\0\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\46\1\62\1\0\1\63"+
    "\7\0\1\3\252\0\2\64\115\0\1\65\u0198\0\1\66"+
    "\1\67\2\0\1\70\1\71\12\0\2\3\u0100\0\1\72"+
    "\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\13\1\14\1\15\1\16"+
    "\1\17\1\20\25\21\1\22\1\23\1\24\5\1\1\0"+
    "\1\25\2\0\1\26\1\27\1\30\3\0\1\31\1\32"+
    "\1\33\5\21\1\0\6\21\1\34\1\0\4\21\1\0"+
    "\1\21\1\34\1\21\1\34\3\21\1\0\12\21\1\0"+
    "\2\21\1\0\3\21\2\0\1\35\1\34\1\0\1\34"+
    "\6\0\1\13\1\0\2\13\2\21\1\0\1\34\3\21"+
    "\1\0\3\21\1\0\2\21\1\34\4\21\1\34\5\21"+
    "\1\0\10\21\1\0\1\21\1\0\3\21\4\0\1\34"+
    "\1\0\1\36\2\21\1\0\2\21\1\0\1\34\1\21"+
    "\1\0\1\21\1\0\6\21\1\0\4\21\1\0\2\21"+
    "\1\0\3\21\1\0\1\21\1\0\1\21\2\0\2\21"+
    "\1\0\3\34\1\21\1\0\11\21\1\0\3\21\1\0"+
    "\1\21\3\0\4\21\1\0\1\34\3\21\1\0\6\21"+
    "\3\0\4\21\1\0\1\21\1\34\5\21\3\0\1\21"+
    "\1\34\2\21\1\0\3\21\1\0\3\21\1\0\1\21"+
    "\1\34\1\0\2\21\1\34\1\21\1\0\1\21\1\34"+
    "\1\21\1\0\5\21\1\34\161\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[408];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\73\0\u0162"+
    "\0\u019d\0\73\0\u01d8\0\73\0\73\0\u0213\0\u024e\0\73"+
    "\0\73\0\u0289\0\73\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0"+
    "\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588"+
    "\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760"+
    "\0\u079b\0\73\0\73\0\73\0\u07d6\0\u0811\0\u084c\0\u0887"+
    "\0\u08c2\0\261\0\73\0\u08fd\0\u0938\0\73\0\73\0\73"+
    "\0\u0973\0\u09ae\0\u09e9\0\73\0\73\0\73\0\u0a24\0\u0a5f"+
    "\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37"+
    "\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f"+
    "\0\u0e4a\0\u0e85\0\u0a24\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac"+
    "\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184"+
    "\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c"+
    "\0\u1397\0\u13d2\0\u140d\0\u07d6\0\73\0\73\0\u1448\0\u1483"+
    "\0\u14be\0\u14f9\0\u1534\0\u156f\0\u08c2\0\u15aa\0\u15e5\0\u1620"+
    "\0\u1620\0\u09e9\0\u165b\0\u1696\0\u16d1\0\u165b\0\u170c\0\u1747"+
    "\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f"+
    "\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7"+
    "\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf"+
    "\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7"+
    "\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f"+
    "\0\u0938\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u20ba"+
    "\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9"+
    "\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591"+
    "\0\u25cc\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769"+
    "\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2890"+
    "\0\u2941\0\u22cd\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3"+
    "\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b"+
    "\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53"+
    "\0\u2e8e\0\u2ec9\0\u2f04\0\u2e18\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0"+
    "\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8"+
    "\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u323e"+
    "\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d"+
    "\0\u3578\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da"+
    "\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3750\0\u3877"+
    "\0\u38b2\0\u38ed\0\u38b2\0\u3928\0\u3963\0\u399e\0\u399e\0\u39d9"+
    "\0\u3a14\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b3b\0\u3b76"+
    "\0\u3bb1\0\u3bec\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e"+
    "\0\u3d89\0\u3dc4\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26"+
    "\0\u3f61\0\u3f9c\0\u3fd7\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe"+
    "\0\u4139\0\u4174\0\u41af\0\u41ea\0\u4225\0\u4260\0\u429b\0\u42d6"+
    "\0\u4311\0\u434c\0\u4387\0\u43c2\0\u43fd\0\u4438\0\u4473\0\u44ae"+
    "\0\u44e9\0\u4524\0\u455f\0\u459a\0\u45d5\0\u4610\0\u464b\0\u4686"+
    "\0\u46c1\0\u46fc\0\u4737\0\u4772\0\u47ad\0\u47e8\0\u4823\0\u485e"+
    "\0\u4899\0\u48d4\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36"+
    "\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e"+
    "\0\u4c49\0\u4c84\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70\0\u4dab\0\u4de6"+
    "\0\u4e21\0\u4e5c\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe"+
    "\0\u4ff9\0\u5034\0\u506f\0\u50aa\0\u50e5\0\u5120\0\u515b\0\u5196"+
    "\0\u51d1\0\u520c\0\u5247\0\u5282\0\u52bd\0\u52f8\0\u5333\0\u536e"+
    "\0\u53a9\0\u53e4\0\u541f\0\u545a\0\u5495\0\u54d0\0\u550b\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[408];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\2\34\1\36"+
    "\1\37\1\40\1\41\1\42\1\34\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\34\1\52\1\53\1\54"+
    "\1\55\1\2\1\56\1\57\1\60\1\2\1\61\2\2"+
    "\74\0\2\3\1\0\1\3\72\0\1\62\1\63\11\0"+
    "\2\62\5\0\31\62\20\0\1\64\12\0\2\64\5\0"+
    "\31\64\25\0\1\65\72\0\1\66\73\0\1\67\74\0"+
    "\1\70\73\0\1\71\1\0\2\17\11\0\1\72\22\0"+
    "\1\73\32\0\1\71\1\0\2\17\11\0\1\72\64\0"+
    "\1\74\1\75\71\0\1\76\65\0\2\77\5\0\1\77"+
    "\1\100\13\77\1\101\3\77\1\102\1\103\6\77\6\0"+
    "\1\104\24\0\2\77\5\0\4\77\1\105\24\77\33\0"+
    "\2\77\5\0\1\106\6\77\1\107\6\77\1\110\12\77"+
    "\33\0\2\77\5\0\4\77\1\111\3\77\1\112\5\77"+
    "\1\113\12\77\5\0\1\114\25\0\2\77\5\0\13\77"+
    "\1\106\1\77\1\101\11\77\1\115\1\77\33\0\2\77"+
    "\5\0\10\77\1\116\5\77\1\117\5\77\1\120\4\77"+
    "\5\0\1\121\25\0\2\77\5\0\16\77\1\122\12\77"+
    "\33\0\2\77\5\0\31\77\33\0\2\77\5\0\5\77"+
    "\1\123\6\77\1\124\1\125\13\77\33\0\2\77\5\0"+
    "\1\126\30\77\33\0\2\77\5\0\16\77\1\101\12\77"+
    "\33\0\2\77\5\0\10\77\1\127\5\77\1\130\12\77"+
    "\5\0\1\131\25\0\2\77\5\0\1\77\1\132\3\77"+
    "\1\123\13\77\1\123\7\77\33\0\2\77\5\0\1\133"+
    "\20\77\1\134\7\77\33\0\2\77\5\0\4\77\1\135"+
    "\24\77\33\0\2\77\5\0\4\77\1\130\2\77\1\136"+
    "\13\77\1\137\5\77\33\0\2\77\5\0\7\77\1\140"+
    "\6\77\1\123\11\77\1\141\33\0\2\77\5\0\15\77"+
    "\1\142\4\77\1\143\6\77\6\0\1\144\24\0\2\77"+
    "\5\0\1\145\7\77\1\146\20\77\5\0\1\147\25\0"+
    "\2\77\5\0\7\77\1\150\1\151\10\77\1\152\7\77"+
    "\5\0\1\153\25\0\2\77\5\0\16\77\1\145\12\77"+
    "\14\0\63\154\1\155\7\154\33\0\1\156\6\0\1\157"+
    "\1\160\61\0\1\161\2\0\1\162\13\0\1\163\25\0"+
    "\1\164\12\0\2\164\5\0\31\164\20\0\1\165\12\0"+
    "\2\165\5\0\31\165\12\0\1\63\7\0\1\63\64\0"+
    "\2\65\2\0\5\65\1\166\61\65\17\0\2\167\64\0"+
    "\1\170\1\0\1\170\2\0\2\171\71\0\2\172\5\0"+
    "\6\172\56\0\2\173\5\0\31\173\33\0\2\173\5\0"+
    "\22\173\1\174\6\173\6\0\1\175\24\0\2\173\5\0"+
    "\3\173\1\176\25\173\33\0\2\173\5\0\21\173\1\177"+
    "\7\173\33\0\2\173\5\0\14\173\1\176\14\173\56\0"+
    "\1\156\47\0\2\173\5\0\6\173\1\200\22\173\33\0"+
    "\2\173\5\0\22\173\1\201\6\173\6\0\1\202\24\0"+
    "\2\173\5\0\1\203\30\173\33\0\2\173\5\0\15\173"+
    "\1\204\13\173\33\0\2\173\5\0\22\173\1\205\6\173"+
    "\6\0\1\206\24\0\2\173\5\0\25\173\1\176\3\173"+
    "\33\0\2\173\5\0\26\173\1\207\2\173\67\0\1\156"+
    "\36\0\2\173\5\0\23\173\1\210\5\173\33\0\2\173"+
    "\5\0\13\173\1\201\15\173\33\0\2\173\5\0\21\173"+
    "\1\211\7\173\33\0\2\173\5\0\15\173\1\212\13\173"+
    "\55\0\1\202\50\0\2\173\5\0\23\173\1\213\5\173"+
    "\33\0\2\173\5\0\17\173\1\214\11\173\33\0\2\173"+
    "\5\0\13\173\1\215\7\173\1\216\5\173\33\0\2\173"+
    "\5\0\1\173\1\217\27\173\33\0\2\173\5\0\13\173"+
    "\1\176\15\173\33\0\2\173\5\0\23\173\1\176\5\173"+
    "\55\0\1\156\50\0\2\173\5\0\11\173\1\220\17\173"+
    "\33\0\2\173\5\0\2\173\1\221\26\173\33\0\2\173"+
    "\5\0\10\173\1\222\5\173\1\223\12\173\5\0\1\224"+
    "\25\0\2\173\5\0\1\225\1\173\1\226\14\173\1\227"+
    "\11\173\33\0\2\173\5\0\13\173\1\176\5\173\1\176"+
    "\7\173\33\0\2\173\5\0\21\173\1\230\7\173\33\0"+
    "\2\173\5\0\4\173\1\231\24\173\33\0\2\173\5\0"+
    "\17\173\1\201\11\173\33\0\2\173\5\0\10\173\1\232"+
    "\12\173\1\233\5\173\5\0\1\161\25\0\2\173\5\0"+
    "\4\173\1\234\24\173\46\0\1\235\57\0\2\173\5\0"+
    "\21\173\1\176\7\173\33\0\2\173\5\0\21\173\1\236"+
    "\7\173\63\0\1\237\42\0\2\173\5\0\10\173\1\240"+
    "\20\173\5\0\1\121\25\0\2\173\5\0\23\173\1\241"+
    "\5\173\33\0\2\173\5\0\10\173\1\242\20\173\5\0"+
    "\1\243\57\0\1\244\66\0\1\245\66\0\1\246\7\0"+
    "\1\247\72\0\1\156\62\0\1\156\5\0\1\156\72\0"+
    "\1\250\112\0\1\63\3\0\2\65\2\0\4\65\1\251"+
    "\1\166\61\65\17\0\2\167\11\0\1\72\57\0\2\171"+
    "\71\0\2\252\5\0\31\252\33\0\2\252\5\0\16\252"+
    "\1\253\12\252\60\0\1\254\45\0\2\252\5\0\1\255"+
    "\30\252\33\0\2\252\5\0\10\252\1\256\20\252\5\0"+
    "\1\257\25\0\2\252\5\0\4\252\1\260\24\252\46\0"+
    "\1\156\57\0\2\252\5\0\21\252\1\260\7\252\33\0"+
    "\2\252\5\0\22\252\1\261\6\252\6\0\1\262\24\0"+
    "\2\252\5\0\23\252\1\263\5\252\65\0\1\264\40\0"+
    "\2\252\5\0\15\252\1\265\13\252\33\0\2\252\5\0"+
    "\4\252\1\266\24\252\33\0\2\252\5\0\26\252\1\267"+
    "\2\252\33\0\2\252\5\0\2\252\1\270\26\252\33\0"+
    "\2\252\5\0\16\252\1\260\12\252\33\0\2\252\5\0"+
    "\13\252\1\271\15\252\33\0\2\252\5\0\10\252\1\272"+
    "\20\252\5\0\1\273\25\0\2\252\5\0\4\252\1\274"+
    "\24\252\33\0\2\252\5\0\4\252\1\275\24\252\33\0"+
    "\2\252\5\0\4\252\1\276\24\252\33\0\2\252\5\0"+
    "\12\252\1\277\16\252\13\0\1\300\17\0\2\252\5\0"+
    "\25\252\1\301\3\252\33\0\2\252\5\0\2\252\1\302"+
    "\26\252\67\0\1\303\36\0\2\252\5\0\3\252\1\260"+
    "\7\252\1\260\15\252\33\0\2\252\5\0\16\252\1\304"+
    "\12\252\33\0\2\252\5\0\4\252\1\305\24\252\33\0"+
    "\2\252\5\0\10\252\1\306\20\252\5\0\1\307\25\0"+
    "\2\252\5\0\15\252\1\260\13\252\33\0\2\252\5\0"+
    "\23\252\1\260\5\252\33\0\2\252\5\0\10\252\1\275"+
    "\20\252\5\0\1\131\25\0\2\252\5\0\22\252\1\260"+
    "\6\252\6\0\1\156\55\0\1\156\14\0\1\156\24\0"+
    "\2\252\5\0\23\252\1\310\5\252\65\0\1\311\40\0"+
    "\2\252\5\0\13\252\1\312\15\252\33\0\2\252\5\0"+
    "\7\252\1\260\21\252\33\0\2\252\5\0\23\252\1\312"+
    "\5\252\65\0\1\202\56\0\1\156\76\0\1\313\67\0"+
    "\1\273\25\0\1\273\40\0\1\314\76\0\1\307\25\0"+
    "\1\307\25\0\2\315\5\0\31\315\33\0\2\315\5\0"+
    "\13\315\1\316\15\315\55\0\1\317\50\0\2\315\5\0"+
    "\30\315\1\320\33\0\2\315\5\0\15\315\1\320\13\315"+
    "\57\0\1\156\46\0\2\315\5\0\23\315\1\321\5\315"+
    "\65\0\1\322\40\0\2\315\5\0\21\315\1\323\7\315"+
    "\63\0\1\324\42\0\2\315\5\0\23\315\1\325\5\315"+
    "\33\0\2\315\5\0\21\315\1\326\7\315\33\0\2\315"+
    "\5\0\1\327\30\315\33\0\2\315\5\0\23\315\1\330"+
    "\5\315\33\0\2\315\5\0\4\315\1\331\24\315\33\0"+
    "\2\315\5\0\15\315\1\332\13\315\57\0\1\202\46\0"+
    "\2\315\5\0\21\315\1\333\7\315\33\0\2\315\5\0"+
    "\13\315\1\320\15\315\33\0\2\315\5\0\2\315\1\334"+
    "\26\315\33\0\2\315\5\0\4\315\1\335\24\315\46\0"+
    "\1\336\57\0\2\315\5\0\1\337\30\315\33\0\2\315"+
    "\5\0\4\315\1\340\24\315\42\0\1\243\63\0\2\315"+
    "\5\0\21\315\1\335\7\315\33\0\2\315\5\0\1\334"+
    "\30\315\33\0\2\315\5\0\15\315\1\341\13\315\57\0"+
    "\1\342\46\0\2\315\5\0\24\315\1\343\4\315\66\0"+
    "\1\344\37\0\2\315\5\0\4\315\1\320\24\315\46\0"+
    "\1\345\107\0\1\346\42\0\2\347\5\0\31\347\33\0"+
    "\2\347\5\0\24\347\1\350\4\347\66\0\1\243\37\0"+
    "\2\347\5\0\21\347\1\351\7\347\33\0\2\347\5\0"+
    "\24\347\1\352\4\347\66\0\1\353\37\0\2\347\5\0"+
    "\16\347\1\354\12\347\33\0\2\347\5\0\15\347\1\355"+
    "\13\347\33\0\2\347\5\0\21\347\1\356\7\347\33\0"+
    "\2\347\5\0\10\347\1\357\20\347\5\0\1\360\25\0"+
    "\2\347\5\0\14\347\1\361\14\347\33\0\2\347\5\0"+
    "\4\347\1\354\24\347\33\0\2\347\5\0\5\347\1\362"+
    "\13\347\1\363\7\347\33\0\2\347\5\0\23\347\1\354"+
    "\5\347\33\0\2\347\5\0\3\347\1\354\25\347\45\0"+
    "\1\156\60\0\2\347\5\0\23\347\1\364\5\347\33\0"+
    "\2\347\5\0\3\347\1\365\25\347\33\0\2\347\5\0"+
    "\6\347\1\354\22\347\50\0\1\156\55\0\2\347\5\0"+
    "\1\366\30\347\42\0\1\131\106\0\1\367\63\0\1\370"+
    "\13\0\1\371\42\0\2\372\5\0\31\372\33\0\2\372"+
    "\5\0\23\372\1\373\5\372\33\0\2\372\5\0\24\372"+
    "\1\374\4\372\33\0\2\372\5\0\2\372\1\375\26\372"+
    "\44\0\1\376\61\0\2\372\5\0\1\377\30\372\33\0"+
    "\2\372\5\0\3\372\1\u0100\25\372\33\0\2\372\5\0"+
    "\16\372\1\u0101\12\372\60\0\1\257\45\0\2\372\5\0"+
    "\4\372\1\u0102\24\372\33\0\2\372\5\0\1\u0103\30\372"+
    "\33\0\2\372\5\0\24\372\1\u0104\4\372\33\0\2\372"+
    "\5\0\4\372\1\u0100\24\372\33\0\2\372\5\0\24\372"+
    "\1\u0105\4\372\33\0\2\372\5\0\13\372\1\u0100\15\372"+
    "\46\0\1\u0106\66\0\1\u0107\116\0\1\u0108\37\0\2\u0109"+
    "\5\0\31\u0109\33\0\2\u0109\5\0\4\u0109\1\u010a\24\u0109"+
    "\33\0\2\u0109\5\0\2\u0109\1\u010b\26\u0109\33\0\2\u0109"+
    "\5\0\23\u0109\1\u010c\5\u0109\65\0\1\u010d\40\0\2\u0109"+
    "\5\0\13\u0109\1\u010a\15\u0109\33\0\2\u0109\5\0\15\u0109"+
    "\1\u010a\13\u0109\33\0\2\u0109\5\0\15\u0109\1\u010e\13\u0109"+
    "\33\0\2\u0109\5\0\2\u0109\1\u010f\26\u0109\33\0\2\u0109"+
    "\5\0\17\u0109\1\u0110\11\u0109\33\0\2\u0109\5\0\21\u0109"+
    "\1\u010f\7\u0109\57\0\1\u0111\57\0\1\202\107\0\1\161"+
    "\44\0\2\u0112\5\0\31\u0112\33\0\2\u0112\5\0\23\u0112"+
    "\1\u0113\5\u0112\33\0\2\u0112\5\0\16\u0112\1\u0114\12\u0112"+
    "\60\0\1\u0115\45\0\2\u0112\5\0\23\u0112\1\u0116\5\u0112"+
    "\33\0\2\u0112\5\0\4\u0112\1\u0117\24\u0112\33\0\2\u0112"+
    "\5\0\23\u0112\1\u0117\5\u0112\65\0\1\u0118\40\0\2\u0119"+
    "\5\0\31\u0119\33\0\2\u0119\5\0\16\u0119\1\u011a\12\u0119"+
    "\33\0\2\u0119\5\0\21\u0119\1\u011b\7\u0119\63\0\1\156"+
    "\42\0\2\u0119\5\0\1\u011c\30\u0119\42\0\1\u011d\63\0"+
    "\2\u011e\5\0\31\u011e\33\0\2\u011e\5\0\21\u011e\1\u011f"+
    "\7\u011e\33\0\2\u011e\5\0\23\u011e\1\u0120\5\u011e\65\0"+
    "\1\u0121\40\0\2\u0122\5\0\31\u0122\33\0\2\u0122\5\0"+
    "\10\u0122\1\u0123\20\u0122\5\0\1\360\44\0\1\360\25\0"+
    "\1\360\25\0\2\u0124\5\0\31\u0124\33\0\2\u0124\5\0"+
    "\16\u0124\1\u0125\12\u0124\33\0\2\u0126\5\0\31\u0126\33\0"+
    "\2\u0126\5\0\15\u0126\1\u0127\13\u0126\33\0\2\u0128\5\0"+
    "\31\u0128\33\0\2\u0129\5\0\31\u0129\33\0\2\u012a\5\0"+
    "\31\u012a\33\0\2\u012b\5\0\31\u012b\33\0\2\u012c\5\0"+
    "\31\u012c\33\0\2\u012d\5\0\31\u012d\33\0\2\u012e\5\0"+
    "\31\u012e\33\0\2\u012f\5\0\31\u012f\33\0\2\u0130\5\0"+
    "\31\u0130\33\0\2\u0131\5\0\31\u0131\33\0\2\u0132\5\0"+
    "\31\u0132\33\0\2\u0133\5\0\31\u0133\33\0\2\u0134\5\0"+
    "\31\u0134\33\0\2\u0135\5\0\31\u0135\33\0\2\u0136\5\0"+
    "\31\u0136\33\0\2\u0137\5\0\31\u0137\33\0\2\u0138\5\0"+
    "\31\u0138\33\0\2\u0139\5\0\31\u0139\33\0\2\u013a\5\0"+
    "\31\u013a\33\0\2\u013b\5\0\31\u013b\33\0\2\u013c\5\0"+
    "\31\u013c\33\0\2\u013d\5\0\31\u013d\33\0\2\u013e\5\0"+
    "\31\u013e\33\0\2\u013f\5\0\31\u013f\33\0\2\u0140\5\0"+
    "\31\u0140\33\0\2\u0141\5\0\31\u0141\33\0\2\u0142\5\0"+
    "\31\u0142\33\0\2\u0143\5\0\31\u0143\33\0\2\u0144\5\0"+
    "\31\u0144\33\0\2\u0145\5\0\31\u0145\33\0\2\u0146\5\0"+
    "\31\u0146\33\0\2\u0147\5\0\31\u0147\33\0\2\u0148\5\0"+
    "\31\u0148\33\0\2\u0149\5\0\31\u0149\33\0\2\u014a\5\0"+
    "\31\u014a\33\0\2\u014b\5\0\31\u014b\33\0\2\u014c\5\0"+
    "\31\u014c\33\0\2\u014d\5\0\31\u014d\33\0\2\u014e\5\0"+
    "\31\u014e\33\0\2\u014f\5\0\31\u014f\33\0\2\u0150\5\0"+
    "\31\u0150\33\0\2\u0151\5\0\31\u0151\33\0\2\u0152\5\0"+
    "\31\u0152\33\0\2\u0153\5\0\31\u0153\33\0\2\u0154\5\0"+
    "\31\u0154\33\0\2\u0155\5\0\31\u0155\33\0\2\u0156\5\0"+
    "\31\u0156\33\0\2\u0157\5\0\31\u0157\33\0\2\u0158\5\0"+
    "\31\u0158\33\0\2\u0159\5\0\31\u0159\33\0\2\u015a\5\0"+
    "\31\u015a\33\0\2\u015b\5\0\31\u015b\33\0\2\u015c\5\0"+
    "\31\u015c\33\0\2\u015d\5\0\31\u015d\33\0\2\u015e\5\0"+
    "\31\u015e\33\0\2\u015f\5\0\31\u015f\33\0\2\u0160\5\0"+
    "\31\u0160\33\0\2\u0161\5\0\31\u0161\33\0\2\u0162\5\0"+
    "\31\u0162\33\0\2\u0163\5\0\31\u0163\33\0\2\u0164\5\0"+
    "\31\u0164\33\0\2\u0165\5\0\31\u0165\33\0\2\u0166\5\0"+
    "\31\u0166\33\0\2\u0167\5\0\31\u0167\33\0\2\u0168\5\0"+
    "\31\u0168\33\0\2\u0169\5\0\31\u0169\33\0\2\u016a\5\0"+
    "\31\u016a\33\0\2\u016b\5\0\31\u016b\33\0\2\u016c\5\0"+
    "\31\u016c\33\0\2\u016d\5\0\31\u016d\33\0\2\u016e\5\0"+
    "\31\u016e\33\0\2\u016f\5\0\31\u016f\33\0\2\u0170\5\0"+
    "\31\u0170\33\0\2\u0171\5\0\31\u0171\33\0\2\u0172\5\0"+
    "\31\u0172\33\0\2\u0173\5\0\31\u0173\33\0\2\u0174\5\0"+
    "\31\u0174\33\0\2\u0175\5\0\31\u0175\33\0\2\u0176\5\0"+
    "\31\u0176\33\0\2\u0177\5\0\31\u0177\33\0\2\u0178\5\0"+
    "\31\u0178\33\0\2\u0179\5\0\31\u0179\33\0\2\u017a\5\0"+
    "\31\u017a\33\0\2\u017b\5\0\31\u017b\33\0\2\u017c\5\0"+
    "\31\u017c\33\0\2\u017d\5\0\31\u017d\33\0\2\u017e\5\0"+
    "\31\u017e\33\0\2\u017f\5\0\31\u017f\33\0\2\u0180\5\0"+
    "\31\u0180\33\0\2\u0181\5\0\31\u0181\33\0\2\u0182\5\0"+
    "\31\u0182\33\0\2\u0183\5\0\31\u0183\33\0\2\u0184\5\0"+
    "\31\u0184\33\0\2\u0185\5\0\31\u0185\33\0\2\u0186\5\0"+
    "\31\u0186\33\0\2\u0187\5\0\31\u0187\33\0\2\u0188\5\0"+
    "\31\u0188\33\0\2\u0189\5\0\31\u0189\33\0\2\u018a\5\0"+
    "\31\u018a\33\0\2\u018b\5\0\31\u018b\33\0\2\u018c\5\0"+
    "\31\u018c\33\0\2\u018d\5\0\31\u018d\33\0\2\u018e\5\0"+
    "\31\u018e\33\0\2\u018f\5\0\31\u018f\33\0\2\u0190\5\0"+
    "\31\u0190\33\0\2\u0191\5\0\31\u0191\33\0\2\u0192\5\0"+
    "\31\u0192\33\0\2\u0193\5\0\31\u0193\33\0\2\u0194\5\0"+
    "\31\u0194\33\0\2\u0195\5\0\31\u0195\33\0\2\u0196\5\0"+
    "\31\u0196\33\0\2\u0197\5\0\31\u0197\33\0\2\u0198\5\0"+
    "\31\u0198\14\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[21830];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\2\1\1\11\1\1\2\11"+
    "\2\1\2\11\1\1\1\11\26\1\3\11\5\1\1\0"+
    "\1\11\2\0\3\11\3\0\3\11\5\1\1\0\7\1"+
    "\1\0\4\1\1\0\7\1\1\0\12\1\1\0\2\1"+
    "\1\0\3\1\2\0\2\11\1\0\1\1\6\0\1\1"+
    "\1\0\4\1\1\0\4\1\1\0\3\1\1\0\15\1"+
    "\1\0\10\1\1\0\1\1\1\0\3\1\4\0\1\1"+
    "\1\0\3\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\6\1\1\0\4\1\1\0\2\1\1\0\3\1"+
    "\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1"+
    "\1\0\11\1\1\0\3\1\1\0\1\1\3\0\4\1"+
    "\1\0\4\1\1\0\6\1\3\0\4\1\1\0\7\1"+
    "\3\0\4\1\1\0\3\1\1\0\3\1\1\0\2\1"+
    "\1\0\4\1\1\0\3\1\1\0\166\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[408];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public absScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new token("ERROR", yytext(), yyline);
            }
          // fall through
          case 31: break;
          case 2:
            { /* Ignore */
            }
          // fall through
          case 32: break;
          case 3:
            { return new token("OP_OPENPARENTHESIS", yytext(), yyline);
            }
          // fall through
          case 33: break;
          case 4:
            { return new token("OR_CLOSEPARENTHESIS", yytext(), yyline);
            }
          // fall through
          case 34: break;
          case 5:
            { return new token("OP_MULT", yytext(), yyline);
            }
          // fall through
          case 35: break;
          case 6:
            { return new token("OP_SUM", yytext(), yyline);
            }
          // fall through
          case 36: break;
          case 7:
            { return new token("OP_COMMA", yytext(), yyline);
            }
          // fall through
          case 37: break;
          case 8:
            { return new token("OP_MINUS", yytext(), yyline);
            }
          // fall through
          case 38: break;
          case 9:
            { return new token("OP_PERIOD", yytext(), yyline);
            }
          // fall through
          case 39: break;
          case 10:
            { return new token("OP_SLASH", yytext(), yyline);
            }
          // fall through
          case 40: break;
          case 11:
            { return new token("NUMBER", yytext(), yyline);
            }
          // fall through
          case 41: break;
          case 12:
            { return new token("OP_COLON", yytext(), yyline);
            }
          // fall through
          case 42: break;
          case 13:
            { return new token("OP_SEMICOLON", yytext(), yyline);
            }
          // fall through
          case 43: break;
          case 14:
            { return new token("OP_LESS", yytext(), yyline);
            }
          // fall through
          case 44: break;
          case 15:
            { return new token("OP_EQUALS", yytext(), yyline);
            }
          // fall through
          case 45: break;
          case 16:
            { return new token("OP_GREATER", yytext(), yyline);
            }
          // fall through
          case 46: break;
          case 17:
            { return new token("IDENTIFIER", yytext(), yyline);
            }
          // fall through
          case 47: break;
          case 18:
            { return new token("OP_OPENBRACKET", yytext(), yyline);
            }
          // fall through
          case 48: break;
          case 19:
            { return new token("OP_CLOSEBRACKET", yytext(), yyline);
            }
          // fall through
          case 49: break;
          case 20:
            { return new token("OP_POWER", yytext(), yyline);
            }
          // fall through
          case 50: break;
          case 21:
            { return new token("LITERAL", yytext(), yyline);
            }
          // fall through
          case 51: break;
          case 22:
            { return new token("OP_DOUBLEASTERISK", yytext(), yyline);
            }
          // fall through
          case 52: break;
          case 23:
            { return new token("OP_INCREASE", yytext(), yyline);
            }
          // fall through
          case 53: break;
          case 24:
            { return new token("OP_DECREASE", yytext(), yyline);
            }
          // fall through
          case 54: break;
          case 25:
            { return new token("OP_LESSEQUAL", yytext(), yyline);
            }
          // fall through
          case 55: break;
          case 26:
            { return new token("OP_TYPE", yytext(), yyline);
            }
          // fall through
          case 56: break;
          case 27:
            { return new token("OP_GREATEREQUAL", yytext(), yyline);
            }
          // fall through
          case 57: break;
          case 28:
            { return new token("KEYWORD", yytext(), yyline);
            }
          // fall through
          case 58: break;
          case 29:
            { /* Inline comment */
            }
          // fall through
          case 59: break;
          case 30:
            { /* Multiblock comment */
            }
          // fall through
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
